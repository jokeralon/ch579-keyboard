<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\BLE.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\BLE.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Oct 23 22:08:33 2022
<BR><P>
<H3>Maximum Stack Usage =        576 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
GAPRole_PeripheralProcessEvent &rArr; gapRole_PeripheralProcessTMOSMsg &rArr; gapRole_PeripheralProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">SVC_Handler</a><BR>
 <LI><a href="#[1d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">PendSV_Handler</a><BR>
 <LI><a href="#[1e]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">SysTick_Handler</a><BR>
 <LI><a href="#[2c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[42]">ATT_BuildErrorRsp</a> from att.o(i.ATT_BuildErrorRsp) referenced from att.o(i.ATT_ErrorRsp)
 <LI><a href="#[43]">ATT_BuildExchangeMTURsp</a> from att_server.o(i.ATT_BuildExchangeMTURsp) referenced from att_server.o(i.ATT_ExchangeMTURsp)
 <LI><a href="#[44]">ATT_BuildFindByTypeValueRsp</a> from att_server.o(i.ATT_BuildFindByTypeValueRsp) referenced from att_server.o(i.ATT_FindByTypeValueRsp)
 <LI><a href="#[45]">ATT_BuildFindInfoRsp</a> from att_server.o(i.ATT_BuildFindInfoRsp) referenced from att_server.o(i.ATT_FindInfoRsp)
 <LI><a href="#[46]">ATT_BuildHandleValueInd</a> from att_server.o(i.ATT_BuildHandleValueInd) referenced from att_server.o(i.ATT_HandleValueInd)
 <LI><a href="#[46]">ATT_BuildHandleValueInd</a> from att_server.o(i.ATT_BuildHandleValueInd) referenced from att_server.o(i.ATT_HandleValueNoti)
 <LI><a href="#[47]">ATT_BuildPrepareWriteRsp</a> from att_server.o(i.ATT_BuildPrepareWriteRsp) referenced from att_server.o(i.ATT_PrepareWriteRsp)
 <LI><a href="#[48]">ATT_BuildReadBlobRsp</a> from att_server.o(i.ATT_BuildReadBlobRsp) referenced from att_server.o(i.ATT_ReadBlobRsp)
 <LI><a href="#[49]">ATT_BuildReadByGrpTypeRsp</a> from att_server.o(i.ATT_BuildReadByGrpTypeRsp) referenced from att_server.o(i.ATT_ReadByGrpTypeRsp)
 <LI><a href="#[4a]">ATT_BuildReadByTypeRsp</a> from att_server.o(i.ATT_BuildReadByTypeRsp) referenced from att_server.o(i.ATT_ReadByTypeRsp)
 <LI><a href="#[4b]">ATT_BuildReadMultiRsp</a> from att_server.o(i.ATT_BuildReadMultiRsp) referenced from att_server.o(i.ATT_ReadMultiRsp)
 <LI><a href="#[4c]">ATT_BuildReadRsp</a> from att_server.o(i.ATT_BuildReadRsp) referenced from att_server.o(i.ATT_ReadRsp)
 <LI><a href="#[89]">ATT_ParseExchangeMTUReq</a> from att_server.o(i.ATT_ParseExchangeMTUReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[9b]">ATT_ParseExecuteWriteReq</a> from att_server.o(i.ATT_ParseExecuteWriteReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[8d]">ATT_ParseFindByTypeValueReq</a> from att_server.o(i.ATT_ParseFindByTypeValueReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[8b]">ATT_ParseFindInfoReq</a> from att_server.o(i.ATT_ParseFindInfoReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[99]">ATT_ParsePrepareWriteReq</a> from att_server.o(i.ATT_ParsePrepareWriteReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[93]">ATT_ParseReadBlobReq</a> from att_server.o(i.ATT_ParseReadBlobReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[8f]">ATT_ParseReadByTypeReq</a> from att_server.o(i.ATT_ParseReadByTypeReq) referenced 2 times from gattservapp.o(.constdata)
 <LI><a href="#[94]">ATT_ParseReadMultiReq</a> from att_server.o(i.ATT_ParseReadMultiReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[91]">ATT_ParseReadReq</a> from att_server.o(i.ATT_ParseReadReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[97]">ATT_ParseWriteReq</a> from att_server.o(i.ATT_ParseWriteReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[23]">BB_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[26]">ETH_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[54]">GAPBondMgr_ProcessEvent</a> from gapbondmgr.o(i.GAPBondMgr_ProcessEvent) referenced from role.o(i.GAPRole_PeripheralInit)
 <LI><a href="#[4f]">GAPRole_PeripheralProcessEvent</a> from peripheral.o(i.GAPRole_PeripheralProcessEvent) referenced from peripheral.o(i.GAPRole_PeripheralEnable)
 <LI><a href="#[51]">GAP_ProcessEvent</a> from gap.o(i.GAP_ProcessEvent) referenced from role.o(i.GAPRole_PeripheralInit)
 <LI><a href="#[55]">GATTServApp_ProcessEvent</a> from gattservapp.o(i.GATTServApp_ProcessEvent) referenced from role.o(i.GAPRole_PeripheralInit)
 <LI><a href="#[52]">GATT_ProcessEvent</a> from gatt.o(i.GATT_ProcessEvent) referenced from role.o(i.GAPRole_PeripheralInit)
 <LI><a href="#[20]">GPIO_IRQHandler</a> from power.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[40]">HAL_GetInterTempValue</a> from mcu.o(.text) referenced from mcu.o(.text)
 <LI><a href="#[41]">HAL_ProcessEvent</a> from mcu.o(.text) referenced from mcu.o(.text)
 <LI><a href="#[1b]">HardFault_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3a]">HidDev_ProcessEvent</a> from hiddev.o(.text) referenced from hiddev.o(.text)
 <LI><a href="#[a]">HidDev_ReadAttrCB</a> from hiddev.o(.text) referenced 2 times from hidkbdservice.o(.data)
 <LI><a href="#[b]">HidDev_WriteAttrCB</a> from hiddev.o(.text) referenced 2 times from hidkbdservice.o(.data)
 <LI><a href="#[34]">HidEmu_ProcessEvent</a> from hidkbd.o(.text) referenced from hidkbd.o(.text)
 <LI><a href="#[37]">Keyboard_ProcessEvent</a> from mykeyboard.o(.text) referenced from mykeyboard.o(.text)
 <LI><a href="#[50]">L2CAP_ProcessEvent</a> from l2cap.o(i.L2CAP_ProcessEvent) referenced from role.o(i.GAPRole_PeripheralInit)
 <LI><a href="#[2e]">LED_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[24]">LLE_IRQHandler</a> from mcu.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[6a]">LL_ProcessEvent</a> from ll.o(i.LL_ProcessEvent) referenced from ll_advertise.o(i.LL_AdvertiseEnalbe)
 <LI><a href="#[1a]">NMI_Handler</a> from ch57x_int.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1d]">PendSV_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[36]">PowerManage_ProcessEvent</a> from power.o(.text) referenced from power.o(.text)
 <LI><a href="#[4d]">RTC_Get32KClock</a> from tmos_hw.o(i.RTC_Get32KClock) referenced from lle.o(i.BLE_IRQHandler)
 <LI><a href="#[4d]">RTC_Get32KClock</a> from tmos_hw.o(i.RTC_Get32KClock) referenced from tmos_hw.o(i.TMOS_TimerInit)
 <LI><a href="#[70]">RTC_GetTickCount</a> from tmos_hw.o(i.RTC_GetTickCount) referenced from tmos_hw.o(i.TMOS_TimerInit)
 <LI><a href="#[2b]">RTC_IRQHandler</a> from rtc.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[19]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[21]">SLAVE_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[53]">SM_ProcessEvent</a> from sm.o(i.SM_ProcessEvent) referenced from role.o(i.GAPRole_PeripheralInit)
 <LI><a href="#[15]">SM_StartEncryption</a> from sm.o(i.SM_StartEncryption) referenced 2 times from sm.o(.data)
 <LI><a href="#[15]">SM_StartEncryption</a> from sm.o(i.SM_StartEncryption) referenced from sm.o(i.SM_ParamInit)
 <LI><a href="#[22]">SPI0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1c]">SVC_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3f]">SYS_GetSysTickCnt</a> from ch57x_sys.o(.text) referenced from mcu.o(.text)
 <LI><a href="#[1e]">SysTick_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3d]">SystemInit</a> from ch57x_clk.o(.text) referenced from startup_armcm0.o(.text)
 <LI><a href="#[6f]">TMOS_CbTimerProcessEvent</a> from tmos.o(i.TMOS_CbTimerProcessEvent) referenced from tmos.o(i.TMOS_Init)
 <LI><a href="#[1f]">TMR0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[27]">TMR1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[28]">TMR2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2f]">TMR3_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[29]">UART0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2a]">UART1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[30]">UART2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[31]">UART3_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from usbhid.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[35]">UsbHid_ProcessEvent</a> from usbhid.o(.text) referenced from usbhid.o(.text)
 <LI><a href="#[32]">WDT_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[38]">WS2812_ProcessEvent</a> from ws2812.o(.text) referenced from ws2812.o(.text)
 <LI><a href="#[3e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_armcm0.o(.text)
 <LI><a href="#[39]">battNotifyCB</a> from battservice.o(.text) referenced from battservice.o(.text)
 <LI><a href="#[3]">battReadAttrCB</a> from battservice.o(.text) referenced 2 times from battservice.o(.data)
 <LI><a href="#[4]">battWriteAttrCB</a> from battservice.o(.text) referenced 2 times from battservice.o(.data)
 <LI><a href="#[5]">devInfo_ReadAttrCB</a> from devinfoservice.o(.text) referenced 2 times from devinfoservice.o(.data)
 <LI><a href="#[71]">fputc</a> from ch57x_sys.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[4e]">gapBondMgrSendServiceChange</a> from gapbondmgr.o(i.gapBondMgrSendServiceChange) referenced from gapbondmgr.o(i.GAPBondMgr_ServiceChangeInd)
 <LI><a href="#[12]">gapBondPairStateCB</a> from gapbondmgr.o(i.gapBondPairStateCB) referenced 2 times from gapbondmgr.o(.data)
 <LI><a href="#[12]">gapBondPairStateCB</a> from gapbondmgr.o(i.gapBondPairStateCB) referenced from gapbondmgr.o(i.GAPBondMgr_ParamInit)
 <LI><a href="#[11]">gapBondPasscodeCB</a> from gapbondmgr.o(i.gapBondPasscodeCB) referenced 2 times from gapbondmgr.o(.data)
 <LI><a href="#[11]">gapBondPasscodeCB</a> from gapbondmgr.o(i.gapBondPasscodeCB) referenced from gapbondmgr.o(i.GAPBondMgr_ParamInit)
 <LI><a href="#[59]">gapCancelLinkReq</a> from gap_central.o(i.gapCancelLinkReq) referenced from gap_central.o(i.GAP_CentralParamInit)
 <LI><a href="#[5a]">gapCentProcessConnEvt</a> from gap_central.o(i.gapCentProcessConnEvt) referenced from gap_central.o(i.GAP_CentralParamInit)
 <LI><a href="#[56]">gapCentProcessHCICmdEvt</a> from gap_central.o(i.gapCentProcessHCICmdEvt) referenced from gap_central.o(i.GAP_CentralParamInit)
 <LI><a href="#[5e]">gapPeriProcessConnEvt</a> from gap_peripheral.o(i.gapPeriProcessConnEvt) referenced from gap_peripheral.o(i.GAP_PeripheralParamInit)
 <LI><a href="#[5b]">gapPeriProcessHCICmdCompleteEvt</a> from gap_peripheral.o(i.gapPeriProcessHCICmdCompleteEvt) referenced from gap_peripheral.o(i.GAP_PeripheralParamInit)
 <LI><a href="#[5c]">gapProcessAdvertisingEvt</a> from gap_peripheral.o(i.gapProcessAdvertisingEvt) referenced from gap_peripheral.o(i.GAP_PeripheralParamInit)
 <LI><a href="#[58]">gapProcessScanningDirectEvt</a> from gap_central.o(i.gapProcessScanningDirectEvt) referenced from gap_central.o(i.GAP_CentralParamInit)
 <LI><a href="#[57]">gapProcessScanningEvt</a> from gap_central.o(i.gapProcessScanningEvt) referenced from gap_central.o(i.GAP_CentralParamInit)
 <LI><a href="#[5d]">gapSetAdvParams</a> from gap_peripheral.o(i.gapSetAdvParams) referenced from gap_peripheral.o(i.GAP_PeripheralParamInit)
 <LI><a href="#[8a]">gattProcessExchangeMTUReq</a> from gattservapp.o(i.gattProcessExchangeMTUReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[9c]">gattProcessExecuteWriteReq</a> from gattservapp.o(i.gattProcessExecuteWriteReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[8e]">gattProcessFindByTypeValueReq</a> from gattservapp.o(i.gattProcessFindByTypeValueReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[8c]">gattProcessFindInfoReq</a> from gattservapp.o(i.gattProcessFindInfoReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[9a]">gattProcessPrepareWriteReq</a> from gattservapp.o(i.gattProcessPrepareWriteReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[96]">gattProcessReadByGrpTypeReq</a> from gattservapp.o(i.gattProcessReadByGrpTypeReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[90]">gattProcessReadByTypeReq</a> from gattservapp.o(i.gattProcessReadByTypeReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[95]">gattProcessReadMultiReq</a> from gattservapp.o(i.gattProcessReadMultiReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[92]">gattProcessReadReq</a> from gattservapp.o(i.gattProcessReadReq) referenced 2 times from gattservapp.o(.constdata)
 <LI><a href="#[98]">gattProcessWriteReq</a> from gattservapp.o(i.gattProcessWriteReq) referenced from gattservapp.o(.constdata)
 <LI><a href="#[60]">gattServApp_HandleConnStatusCB</a> from gattservapp.o(i.gattServApp_HandleConnStatusCB) referenced from gattservapp.o(i.GATTServApp_Init)
 <LI><a href="#[10]">gattServApp_WriteAttrCB</a> from gattservapp.o(i.gattServApp_WriteAttrCB) referenced 2 times from gattservapp.o(.data)
 <LI><a href="#[10]">gattServApp_WriteAttrCB</a> from gattservapp.o(i.gattServApp_WriteAttrCB) referenced from gattservapp.o(i.GATTServApp_ParamInit)
 <LI><a href="#[64]">gattServerHandleConnStatusCB</a> from gattservapp.o(i.gattServerHandleConnStatusCB) referenced from gattservapp.o(i.GATT_InitServer)
 <LI><a href="#[61]">gattServerHandleTimerCB</a> from gattservapp.o(i.gattServerHandleTimerCB) referenced from gattservapp.o(i.GATT_Indication)
 <LI><a href="#[63]">gattServerNotifyTxCB</a> from gattservapp.o(i.gattServerNotifyTxCB) referenced from gattservapp.o(i.GATT_InitServer)
 <LI><a href="#[62]">gattServerProcessMsgCB</a> from gattservapp.o(i.gattServerProcessMsgCB) referenced from gattservapp.o(i.GATT_InitServer)
 <LI><a href="#[e]">ggs_ReadAttrCB</a> from gapgattserver.o(i.ggs_ReadAttrCB) referenced 2 times from gapgattserver.o(.data)
 <LI><a href="#[e]">ggs_ReadAttrCB</a> from gapgattserver.o(i.ggs_ReadAttrCB) referenced from gapgattserver.o(i.GGS_ParamInit)
 <LI><a href="#[f]">ggs_WriteAttrCB</a> from gapgattserver.o(i.ggs_WriteAttrCB) referenced 2 times from gapgattserver.o(.data)
 <LI><a href="#[f]">ggs_WriteAttrCB</a> from gapgattserver.o(i.ggs_WriteAttrCB) referenced from gapgattserver.o(i.GGS_ParamInit)
 <LI><a href="#[3b]">hidDevBattCB</a> from hiddev.o(.text) referenced from hiddev.o(.text)
 <LI><a href="#[8]">hidDevGapStateCB</a> from hiddev.o(.text) referenced 2 times from hiddev.o(.data)
 <LI><a href="#[7]">hidDevPairStateCB</a> from hiddev.o(.text) referenced 2 times from hiddev.o(.data)
 <LI><a href="#[9]">hidDevParamUpdateCB</a> from hiddev.o(.text) referenced 2 times from hiddev.o(.data)
 <LI><a href="#[6]">hidDevPasscodeCB</a> from hiddev.o(.text) referenced 2 times from hiddev.o(.data)
 <LI><a href="#[3c]">hidDevScanParamCB</a> from hiddev.o(.text) referenced from hiddev.o(.text)
 <LI><a href="#[1]">hidEmuEvtCB</a> from hidkbd.o(.text) referenced 2 times from hidkbd.o(.data)
 <LI><a href="#[0]">hidEmuRptCB</a> from hidkbd.o(.text) referenced 2 times from hidkbd.o(.data)
 <LI><a href="#[2]">hidEmuStateCB</a> from hidkbd.o(.text) referenced 2 times from hidkbd.o(.data)
 <LI><a href="#[65]">l2capBuildCmdReject</a> from l2cap_sdu.o(i.l2capBuildCmdReject) referenced from l2cap_sdu.o(i.L2CAP_CmdReject)
 <LI><a href="#[73]">l2capBuildConnectRsp</a> from l2cap_sdu.o(i.l2capBuildConnectRsp) referenced from l2cap_sdu.o(i.l2capSendConnectRsp)
 <LI><a href="#[68]">l2capBuildDisconnectReq</a> from l2cap_sdu.o(i.l2capBuildDisconnectReq) referenced from l2cap_sdu.o(i.L2CAP_DisconnectReq)
 <LI><a href="#[72]">l2capBuildDisconnectRsp</a> from l2cap_sdu.o(i.l2capBuildDisconnectRsp) referenced from l2cap_input.o(i.l2capProcessReq)
 <LI><a href="#[66]">l2capBuildParamUpdateReq</a> from l2cap_sdu.o(i.l2capBuildParamUpdateReq) referenced from l2cap_sdu.o(i.L2CAP_ConnParamUpdateReq)
 <LI><a href="#[67]">l2capBuildParamUpdateRsp</a> from l2cap_sdu.o(i.l2capBuildParamUpdateRsp) referenced from l2cap_sdu.o(i.L2CAP_ConnParamUpdateRsp)
 <LI><a href="#[69]">l2capHandleConnStatusCB</a> from l2cap.o(i.l2capHandleConnStatusCB) referenced from l2cap.o(i.L2CAP_Init)
 <LI><a href="#[74]">l2capHandleTimerCB</a> from l2cap.o(i.l2capHandleTimerCB) referenced from l2cap.o(i.l2capStartTimer)
 <LI><a href="#[77]">llAdvTraverseallChannel</a> from ll_advertise.o(i.llAdvTraverseallChannel) referenced from ll_advertise.o(i.llAdvertiseCreateCore)
 <LI><a href="#[6b]">llAdvertiseCreateCore</a> from ll_advertise.o(i.llAdvertiseCreateCore) referenced from ll_advertise.o(i.LL_AdvertiseEnalbe)
 <LI><a href="#[75]">llAdvertiseSet</a> from ll_advertise.o(i.llAdvertiseSet) referenced from ll_advertise.o(i.llAdvertiseCreateCore)
 <LI><a href="#[76]">llAdvertiseStart</a> from ll_advertise.o(i.llAdvertiseStart) referenced from ll_advertise.o(i.llAdvertiseCreateCore)
 <LI><a href="#[6c]">llSlaveCreateCore</a> from ll_slave.o(i.llSlaveCreateCore) referenced from ll_slave.o(i.LL_SlaveEnalbe)
 <LI><a href="#[6d]">llSlaveSetFirstTimer</a> from ll_slave.o(i.llSlaveSetFirstTimer) referenced from ll_slave.o(i.LL_SlaveEnalbe)
 <LI><a href="#[79]">ll_advertise_process</a> from ll_advertise.o(i.ll_advertise_process) referenced from ll_advertise.o(i.ll_advertise_tx)
 <LI><a href="#[7a]">ll_connect_auth_timeout</a> from ll_connect.o(i.ll_connect_auth_timeout) referenced from ll_connect.o(i.ll_connect_set_auth_timeout)
 <LI><a href="#[7c]">ll_connect_procedure_timeout</a> from ll_connect.o(i.ll_connect_procedure_timeout) referenced from ll_connect.o(i.ll_connect_set_procedure_timeout)
 <LI><a href="#[7b]">ll_connect_supervision_timeout</a> from ll_connect.o(i.ll_connect_supervision_timeout) referenced from ll_connect.o(i.ll_connect_set_connect_timeout)
 <LI><a href="#[7d]">ll_resolvinglist_timeout_renew_rpa</a> from ll_resolvinglist.o(i.ll_resolvinglist_timeout_renew_rpa) referenced from ll_resolvinglist.o(i.ll_resolvinglist_renew_set)
 <LI><a href="#[7e]">ll_slave_process</a> from ll_slave.o(i.ll_slave_process) referenced from ll_slave.o(i.ll_slave_process_event)
 <LI><a href="#[78]">ll_slave_process_event</a> from ll_slave.o(i.ll_slave_process_event) referenced from ll_slave.o(i.llSlaveSetFirstTimer)
 <LI><a href="#[33]">main</a> from hidkbd_main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[c]">scanParamReadAttrCB</a> from scanparamservice.o(.text) referenced 2 times from scanparamservice.o(.data)
 <LI><a href="#[d]">scanParamWriteAttrCB</a> from scanparamservice.o(.text) referenced 2 times from scanparamservice.o(.data)
 <LI><a href="#[14]">smInitiatorSendNextKeyInfo</a> from sm.o(i.smInitiatorSendNextKeyInfo) referenced 2 times from sm.o(.data)
 <LI><a href="#[14]">smInitiatorSendNextKeyInfo</a> from sm.o(i.smInitiatorSendNextKeyInfo) referenced from sm.o(i.SM_ParamInit)
 <LI><a href="#[6e]">smLinkCheck</a> from sm.o(i.smLinkCheck) referenced from sm.o(i.SM_Init)
 <LI><a href="#[18]">smResponderProcessLTKReq</a> from sm.o(i.smResponderProcessLTKReq) referenced 2 times from sm.o(.data)
 <LI><a href="#[18]">smResponderProcessLTKReq</a> from sm.o(i.smResponderProcessLTKReq) referenced from sm.o(i.SM_ParamInit)
 <LI><a href="#[17]">smResponderSendNextKeyInfo</a> from sm.o(i.smResponderSendNextKeyInfo) referenced 2 times from sm.o(.data)
 <LI><a href="#[17]">smResponderSendNextKeyInfo</a> from sm.o(i.smResponderSendNextKeyInfo) referenced from sm.o(i.SM_ParamInit)
 <LI><a href="#[83]">smpBuildEncInfo</a> from sm.o(i.smpBuildEncInfo) referenced from sm.o(i.smPairingSendEncInfo)
 <LI><a href="#[84]">smpBuildIdentityAddrInfo</a> from sm.o(i.smpBuildIdentityAddrInfo) referenced from sm.o(i.smPairingSendIdentityAddrInfo)
 <LI><a href="#[85]">smpBuildIdentityInfo</a> from sm.o(i.smpBuildIdentityInfo) referenced from sm.o(i.smPairingSendIdentityInfo)
 <LI><a href="#[86]">smpBuildMasterID</a> from sm.o(i.smpBuildMasterID) referenced from sm.o(i.smPairingSendMasterID)
 <LI><a href="#[7f]">smpBuildPairingConfirm</a> from sm.o(i.smpBuildPairingConfirm) referenced from sm.o(i.smGenerateConfirm)
 <LI><a href="#[88]">smpBuildPairingFailed</a> from sm.o(i.smpBuildPairingFailed) referenced from sm.o(i.smSendFailAndEnd)
 <LI><a href="#[82]">smpBuildPairingRandom</a> from sm.o(i.smpBuildPairingRandom) referenced from sm.o(i.smGenerateRandMsg)
 <LI><a href="#[80]">smpBuildPairingReq</a> from sm.o(i.smpBuildPairingReq) referenced from sm.o(i.smGeneratePairingReqRsp)
 <LI><a href="#[81]">smpBuildPairingRsp</a> from sm.o(i.smpBuildPairingRsp) referenced from sm.o(i.smGeneratePairingReqRsp)
 <LI><a href="#[5f]">smpBuildSecurityReq</a> from sm.o(i.smpBuildSecurityReq) referenced from gap.o(i.GAP_SendSlaveSecurityRequest)
 <LI><a href="#[87]">smpBuildSigningInfo</a> from sm.o(i.smpBuildSigningInfo) referenced from sm.o(i.smPairingSendSingingInfo)
 <LI><a href="#[13]">smpInitiatorProcessIncoming</a> from sm.o(i.smpInitiatorProcessIncoming) referenced 2 times from sm.o(.data)
 <LI><a href="#[13]">smpInitiatorProcessIncoming</a> from sm.o(i.smpInitiatorProcessIncoming) referenced from sm.o(i.SM_ParamInit)
 <LI><a href="#[16]">smpResponderProcessIncoming</a> from sm.o(i.smpResponderProcessIncoming) referenced 2 times from sm.o(.data)
 <LI><a href="#[16]">smpResponderProcessIncoming</a> from sm.o(i.smpResponderProcessIncoming) referenced from sm.o(i.SM_ParamInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[377]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[378]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[379]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[37a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[37b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[37c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[34]"></a>HidEmu_ProcessEvent</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, hidkbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = HidEmu_ProcessEvent &rArr; HidDev_Report &rArr; hidDevSendReport &rArr; HidDev_sendNoti &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Report
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralConnParamUpdateReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hidkbd.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>HidEmu_Init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, hidkbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HidEmu_Init &rArr; GAPBondMgr_SetParameter &rArr; gapBondMgrReadBonds &rArr; gapBondMgr_SyncResolveList &rArr; HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessEventRegister
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_AddService
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Register
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_SetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_InitTasks
</UL>

<P><STRONG><a name="[b3]"></a>TMOS_InitTasks</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, hidkbd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = TMOS_InitTasks &rArr; HidEmu_Init &rArr; GAPBondMgr_SetParameter &rArr; gapBondMgrReadBonds &rArr; gapBondMgr_SyncResolveList &rArr; HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelaymS
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbHid_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57X_BLEInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, hidkbd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = main &rArr; TMOS_InitTasks &rArr; HidEmu_Init &rArr; GAPBondMgr_SetParameter &rArr; gapBondMgrReadBonds &rArr; gapBondMgr_SyncResolveList &rArr; HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelaymS
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DefInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_SystemProcess
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_UnitModCfg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HClk32M_Select
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_ModeCfg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_InitTasks
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[37d]"></a>DevEP4_OUT_Deal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhid.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>DevEP3_OUT_Deal</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbhid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DevEP3_OUT_Deal
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevEP3_IN_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevTransProcess
</UL>

<P><STRONG><a name="[c4]"></a>DevEP2_OUT_Deal</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbhid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DevEP2_OUT_Deal
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevEP2_IN_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbHid_ProcessEvent
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevTransProcess
</UL>

<P><STRONG><a name="[c6]"></a>DevEP1_OUT_Deal</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbhid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DevEP1_OUT_Deal
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevEP1_IN_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbHid_ProcessEvent
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevTransProcess
</UL>

<P><STRONG><a name="[c8]"></a>USB_DevTransProcess</STRONG> (Thumb, 754 bytes, Stack size 32 bytes, usbhid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_DevTransProcess &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevEP1_OUT_Deal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevEP2_OUT_Deal
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevEP3_OUT_Deal
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[35]"></a>UsbHid_ProcessEvent</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbhid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UsbHid_ProcessEvent &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevEP1_OUT_Deal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevEP2_OUT_Deal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbhid.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>UsbHid_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbhid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UsbHid_Init &rArr; USB_DeviceInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessEventRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_InitTasks
</UL>

<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_IRQHandler &rArr; USB_DevTransProcess &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevTransProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>LowPowerSerive</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LowPowerSerive &rArr; LowPower_Halt_1 &rArr; PowerMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelayuS
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Shutdown (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Idle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Halt_2 (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Halt_1 (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSECFG_Current
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelaymS
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_UnitModCfg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManage_ProcessEvent
</UL>

<P><STRONG><a name="[36]"></a>PowerManage_ProcessEvent</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PowerManage_ProcessEvent &rArr; LowPowerSerive &rArr; LowPower_Halt_1 &rArr; PowerMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerSerive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>PowerManage_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PeriphWakeUpCfg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_ModeCfg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_ITModeCfg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessEventRegister
</UL>

<P><STRONG><a name="[20]"></a>GPIO_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, power.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>keyBoard_GPIO_SetMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mykeyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = keyBoard_GPIO_SetMode &rArr; GPIOB_ModeCfg &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_ModeCfg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_ModeCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_GPIO_Init
</UL>

<P><STRONG><a name="[da]"></a>keyBoard_GPIO_ReadPin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mykeyboard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_Scanf
</UL>

<P><STRONG><a name="[d8]"></a>keyBoard_GPIO_SetPin</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mykeyboard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_Scanf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_GPIO_Init
</UL>

<P><STRONG><a name="[d7]"></a>keyBoard_GPIO_Init</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, mykeyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = keyBoard_GPIO_Init &rArr; keyBoard_GPIO_SetMode &rArr; GPIOB_ModeCfg &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_GPIO_SetPin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_GPIO_SetMode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelaymS
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Init
</UL>

<P><STRONG><a name="[d9]"></a>keyBoard_Scanf</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, mykeyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = keyBoard_Scanf &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_GPIO_SetPin
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_GPIO_ReadPin
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_SendValue
</UL>

<P><STRONG><a name="[dc]"></a>keyBoard_SendValue</STRONG> (Thumb, 814 bytes, Stack size 32 bytes, mykeyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = keyBoard_SendValue &rArr; keyBoard_Scanf &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_Scanf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelayuS
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_ProcessEvent
</UL>

<P><STRONG><a name="[37]"></a>Keyboard_ProcessEvent</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, mykeyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Keyboard_ProcessEvent &rArr; keyBoard_SendValue &rArr; keyBoard_Scanf &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_SendValue
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mykeyboard.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>Keyboard_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mykeyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Keyboard_Init &rArr; keyBoard_GPIO_Init &rArr; keyBoard_GPIO_SetMode &rArr; GPIOB_ModeCfg &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelaymS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessEventRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_InitTasks
</UL>

<P><STRONG><a name="[df]"></a>RGB_LED_Reset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ws2812.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RGB_LED_Reset &rArr; GPIOA_ModeCfg &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelayuS
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_ModeCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_24Bit_Display1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_24Bit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_GPIO_Init
</UL>

<P><STRONG><a name="[e0]"></a>RGB_LED_Write_24Bits</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ws2812.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RGB_LED_Write_24Bits &rArr; SPI0_MasterDMATrans
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_MasterDMATrans
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_24Bit_Display1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_24Bit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_GPIO_Init
</UL>

<P><STRONG><a name="[e2]"></a>RGB_GPIO_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ws2812.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RGB_GPIO_Init &rArr; RGB_LED_Write_24Bits &rArr; SPI0_MasterDMATrans
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_MasterDefInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Write_24Bits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelayuS
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_ModeCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Init
</UL>

<P><STRONG><a name="[e4]"></a>RGB_24Bit</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, ws2812.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RGB_24Bit &rArr; RGB_LED_Write_24Bits &rArr; SPI0_MasterDMATrans
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Write_24Bits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_ProcessEvent
</UL>

<P><STRONG><a name="[e5]"></a>RGB_24Bit_Display1</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ws2812.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RGB_24Bit_Display1 &rArr; RGB_LED_Write_24Bits &rArr; SPI0_MasterDMATrans
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Write_24Bits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Display_1
</UL>

<P><STRONG><a name="[e6]"></a>WS2812_Display_1</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, ws2812.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WS2812_Display_1 &rArr; RGB_24Bit_Display1 &rArr; RGB_LED_Write_24Bits &rArr; SPI0_MasterDMATrans
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_24Bit_Display1
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_ProcessEvent
</UL>

<P><STRONG><a name="[38]"></a>WS2812_ProcessEvent</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ws2812.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WS2812_ProcessEvent &rArr; WS2812_Display_1 &rArr; RGB_24Bit_Display1 &rArr; RGB_LED_Write_24Bits &rArr; SPI0_MasterDMATrans
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Display_1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_24Bit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ws2812.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>WS2812_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ws2812.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WS2812_Init &rArr; RGB_GPIO_Init &rArr; RGB_LED_Write_24Bits &rArr; SPI0_MasterDMATrans
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_GPIO_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessEventRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_InitTasks
</UL>

<P><STRONG><a name="[e7]"></a>Batt_AddService</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, battservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Batt_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Init
</UL>

<P><STRONG><a name="[103]"></a>Batt_Register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, battservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Init
</UL>

<P><STRONG><a name="[a9]"></a>Batt_SetParameter</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, battservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Batt_SetParameter &rArr; linkDB_PerformFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_PerformFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_Init
</UL>

<P><STRONG><a name="[112]"></a>Batt_GetParameter</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, battservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Batt_GetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_AddService
</UL>

<P><STRONG><a name="[f1]"></a>Batt_MeasLevel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, battservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Batt_MeasLevel &rArr; battMeasure &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_PerformFunc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battMeasure
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_ProcessEvent
</UL>

<P><STRONG><a name="[37e]"></a>Batt_Setup</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, battservice.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>Batt_HandleConnStatusCB</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, battservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Batt_HandleConnStatusCB &rArr; linkDB_State &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevDisconnected
</UL>

<P><STRONG><a name="[f6]"></a>DevInfo_AddService</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devinfoservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DevInfo_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Init
</UL>

<P><STRONG><a name="[f7]"></a>DevInfo_SetParameter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, devinfoservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>

<P><STRONG><a name="[f8]"></a>DevInfo_GetParameter</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, devinfoservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[3a]"></a>HidDev_ProcessEvent</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = HidDev_ProcessEvent &rArr; hidDevSendReport &rArr; HidDev_sendNoti &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateLink
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralStartDevice
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevSendReport
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_MeasLevel
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hiddev.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>HidDev_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = HidDev_Init &rArr; GAPBondMgr_SetParameter &rArr; gapBondMgrReadBonds &rArr; gapBondMgr_SyncResolveList &rArr; HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanParam_Register
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanParam_AddService
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_AddService
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_AddService
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_AddService
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_Register
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_AddService
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessEventRegister
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_InitTasks
</UL>

<P><STRONG><a name="[ab]"></a>HidDev_Register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hiddev.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_Init
</UL>

<P><STRONG><a name="[113]"></a>HidDev_RegisterReports</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hiddev.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_AddService
</UL>

<P><STRONG><a name="[a2]"></a>HidDev_Report</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = HidDev_Report &rArr; hidDevSendReport &rArr; HidDev_sendNoti &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevEnqueueReport
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevBondCount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevInitialAdvertising
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevSendReport
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_ProcessEvent
</UL>

<P><STRONG><a name="[109]"></a>HidDev_Close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hiddev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateLink
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
</UL>

<P><STRONG><a name="[10a]"></a>HidDev_SetParameter</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, hiddev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateLink
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevRptById
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_sendNoti
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
</UL>

<P><STRONG><a name="[37f]"></a>HidDev_GetParameter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hiddev.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>HidDev_PasscodeRsp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hiddev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_PasscodeRsp
</UL>

<P><STRONG><a name="[a]"></a>HidDev_ReadAttrCB</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HidDev_ReadAttrCB &rArr; hidDevRptByHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevRptByHandle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hidkbdservice.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>HidDev_WriteAttrCB</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HidDev_WriteAttrCB &rArr; GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_WriteCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevRptByHandle
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hidkbdservice.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>Hid_AddService</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, hidkbdservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Hid_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_RegisterReports
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_GetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_Init
</UL>

<P><STRONG><a name="[b1]"></a>Hid_SetParameter</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, hidkbdservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Hid_SetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidEmuRptCB
</UL>

<P><STRONG><a name="[b2]"></a>Hid_GetParameter</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hidkbdservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hid_GetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidEmuRptCB
</UL>

<P><STRONG><a name="[102]"></a>ScanParam_AddService</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, scanparamservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ScanParam_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Init
</UL>

<P><STRONG><a name="[104]"></a>ScanParam_Register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scanparamservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Init
</UL>

<P><STRONG><a name="[380]"></a>ScanParam_SetParameter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanparamservice.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>ScanParam_GetParameter</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, scanparamservice.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>ScanParam_RefreshNotify</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, scanparamservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ScanParam_RefreshNotify &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_free
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevPairStateCB
</UL>

<P><STRONG><a name="[10f]"></a>ScanParam_HandleConnStatusCB</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scanparamservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ScanParam_HandleConnStatusCB &rArr; linkDB_State &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevDisconnected
</UL>

<P><STRONG><a name="[19]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>BB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>LED_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SLAVE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SystemInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ch57x_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; PowerMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelayuS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>SetSysClock</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, ch57x_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetSysClock &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerSerive
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>GetSysClock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ch57x_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetSysClock &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_BaudRateCfg
</UL>

<P><STRONG><a name="[bd]"></a>HClk32M_Select</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ch57x_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[382]"></a>LClk32K_Select</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ch57x_clk.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>HSECFG_Current</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ch57x_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerSerive
</UL>

<P><STRONG><a name="[383]"></a>HSECFG_Capacitance</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ch57x_clk.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>LSECFG_Current</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ch57x_clk.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>LSECFG_Capacitance</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ch57x_clk.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>Calibration_LSI</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, ch57x_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_Calibration_LSI
</UL>

<P><STRONG><a name="[117]"></a>RTC_InitTime</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, ch57x_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RTC_InitTime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TimeInit
</UL>

<P><STRONG><a name="[118]"></a>RTC_GetTime</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, ch57x_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[386]"></a>RTC_SetCycle32k</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ch57x_clk.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>RTC_GetCycle32k</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ch57x_clk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TRIGFunCfg
</UL>

<P><STRONG><a name="[387]"></a>RTC_TMRFunCfg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ch57x_clk.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>RTC_TRIGFunCfg</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, ch57x_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCycle32k
</UL>

<P><STRONG><a name="[388]"></a>RTC_ModeFunDisable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ch57x_clk.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>RTC_GetITFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ch57x_clk.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>RTC_ClearITFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ch57x_clk.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>GPIOA_ModeCfg</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, ch57x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOA_ModeCfg &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_GPIO_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Reset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_GPIO_SetMode
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>GPIOB_ModeCfg</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, ch57x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOB_ModeCfg &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_GPIO_SetMode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManage_Init
</UL>

<P><STRONG><a name="[38b]"></a>GPIOA_ITModeCfg</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ch57x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>GPIOB_ITModeCfg</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ch57x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManage_Init
</UL>

<P><STRONG><a name="[38c]"></a>GPIOPinRemap</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ch57x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>GPIOAGPPCfg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ch57x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>PWR_DCDCCfg</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ch57x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelayuS
</UL>

<P><STRONG><a name="[be]"></a>PWR_UnitModCfg</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, ch57x_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PWR_UnitModCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerSerive
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38e]"></a>PWR_PeriphClkCfg</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, ch57x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>PWR_PeriphWakeUpCfg</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, ch57x_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManage_Init
</UL>

<P><STRONG><a name="[114]"></a>PowerMonitor</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ch57x_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PowerMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelayuS
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Halt_1 (via Veneer)
</UL>

<P><STRONG><a name="[cc]"></a>LowPower_Idle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ch57x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerSerive
</UL>

<P><STRONG><a name="[38f]"></a>EnterCodeUpgrade</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ch57x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>SYS_GetInfoSta</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ch57x_sys.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>SYS_ResetExecute</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ch57x_sys.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>SYS_DisableAllIrq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ch57x_sys.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>SYS_RecoverIrq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ch57x_sys.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>SYS_GetSysTickCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ch57x_sys.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mcu.o(.text)
</UL>
<P><STRONG><a name="[394]"></a>WWDG_ITCfg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ch57x_sys.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>WWDG_ResetCfg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ch57x_sys.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>WWDG_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ch57x_sys.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>mDelayuS</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ch57x_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_GPIO_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Reset
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_SendValue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerSerive
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelaymS
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DCDCCfg
</UL>

<P><STRONG><a name="[bb]"></a>mDelaymS</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ch57x_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mDelaymS
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelayuS
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_GPIO_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerSerive
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_InitTasks
</UL>

<P><STRONG><a name="[71]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ch57x_sys.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[11c]"></a>UART1_BaudRateCfg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ch57x_uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART1_BaudRateCfg &rArr; GetSysClock &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysClock
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DefInit
</UL>

<P><STRONG><a name="[c0]"></a>UART1_DefInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ch57x_uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART1_DefInit &rArr; UART1_BaudRateCfg &rArr; GetSysClock &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_BaudRateCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[397]"></a>UART1_ByteTrigCfg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ch57x_uart1.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>UART1_INTCfg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ch57x_uart1.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>UART1_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ch57x_uart1.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>UART1_SendString</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ch57x_uart1.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>UART1_RecvString</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ch57x_uart1.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>USB_DeviceInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ch57x_usbdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeviceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbHid_Init
</UL>

<P><STRONG><a name="[c7]"></a>DevEP1_IN_Deal</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ch57x_usbdev.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevEP1_OUT_Deal
</UL>

<P><STRONG><a name="[c5]"></a>DevEP2_IN_Deal</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ch57x_usbdev.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevEP2_OUT_Deal
</UL>

<P><STRONG><a name="[c3]"></a>DevEP3_IN_Deal</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ch57x_usbdev.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevEP3_OUT_Deal
</UL>

<P><STRONG><a name="[39c]"></a>DevEP4_IN_Deal</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ch57x_usbdev.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>ADC_DataCalib_Rough</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, ch57x_adc.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>ADC_DataCalib_Fine</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ch57x_adc.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>ADC_ExtSingleChSampInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ch57x_adc.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>ADC_ExtDiffChSampInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ch57x_adc.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>ADC_InterTSSampInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ch57x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetInterTempValue
</UL>

<P><STRONG><a name="[3a1]"></a>ADC_InterBATSampInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ch57x_adc.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>TouchKey_ChSampInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ch57x_adc.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>ADC_ExcutSingleConver</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ch57x_adc.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>TouchKey_ExcutSingleConver</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ch57x_adc.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>ADC_GetCurrentTS</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ch57x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[e3]"></a>SPI0_MasterDefInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ch57x_spi0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_GPIO_Init
</UL>

<P><STRONG><a name="[3a5]"></a>SPI0_CLKCfg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>SPI0_DataMode</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>SPI0_MasterSendByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>SPI0_MasterRecvByte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>SPI0_MasterTrans</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>SPI0_MasterRecv</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>SPI0_MasterDMATrans</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ch57x_spi0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_MasterDMATrans
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Write_24Bits
</UL>

<P><STRONG><a name="[3ab]"></a>SPI0_MasterDMARecv</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>SPI0_SlaveInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>SPI0_SlaveRecvByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>SPI0_SlaveSendByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>SPI0_SlaveRecv</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>SPI0_SlaveTrans</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>SPI0_SlaveDMARecv</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>SPI0_SlaveDMATrans</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ch57x_spi0.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>Lib_Calibration_LSI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mcu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_LSI
</UL>

<P><STRONG><a name="[40]"></a>HAL_GetInterTempValue</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GetInterTempValue
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InterTSSampInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcu.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>CH57X_BLEInit</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CH57X_BLEInit &rArr; BLE_LibInit &rArr; TMOS_Init &rArr; tmos_snv_init &rArr; tmos_snv_clear &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LibInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_InitTasks
</UL>

<P><STRONG><a name="[41]"></a>HAL_ProcessEvent</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_ProcessEvent &rArr; BLE_RegInit &rArr; RFEND_TXCtune &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RegInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcu.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_Init &rArr; HAL_TimeInit &rArr; RTC_InitTime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessEventRegister
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TimeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_InitTasks
</UL>

<P><STRONG><a name="[24]"></a>LLE_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LLE_IRQHandler &rArr; BLE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3b3]"></a>RTC_SetTignTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>RTC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>HAL_TimeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_TimeInit &rArr; RTC_InitTime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_InitTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[3b4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_InitTime
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_LSI
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysClock
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_PasscodeRsp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_ProcessEvent
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevEnqueueReport
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IPCoreInit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetNextConnectEventTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_BaudRateCfg
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoteConnParamReqReply
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_HopGetChannel
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_event
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_after_tx
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveSetFirstTimer
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_check_connect_point
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_update_get_offset
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_init_pingOffset
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_change_connect_point
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_action_in_connintervaltimeout
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseStart
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStartTimer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[3b5]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_InitTime
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_LSI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battMeasure
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFEND_TXCtune
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCurrentTS
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataPkt
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_init_pingOffset
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyCreditEvt
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand8
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand32
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand16
</UL>

<P><STRONG><a name="[3b6]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_HopGetChannel
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3b7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevTransProcess
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
</UL>

<P><STRONG><a name="[3b8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_SendValue
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_Scanf
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3ba]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3bb]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>AES_DecError</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, aes.o(i.AES_DecError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AES_DecError
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_DevPktEnc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_DevPktDec
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RegInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_DevAESEnc
</UL>

<P><STRONG><a name="[12b]"></a>AES_DevAESEnc</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, aes.o(i.AES_DevAESEnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_DecError
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt
</UL>

<P><STRONG><a name="[12d]"></a>AES_DevPktDec</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, aes.o(i.AES_DevPktDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AES_DevPktDec &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_DecError
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_api_set_pkt_dec
</UL>

<P><STRONG><a name="[12e]"></a>AES_DevPktEnc</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, aes.o(i.AES_DevPktEnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AES_DevPktEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_DecError
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_api_set_pkt_enc
</UL>

<P><STRONG><a name="[12f]"></a>API_DisconnectCmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, api_c.o(i.API_DisconnectCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = API_DisconnectCmd &rArr; HCI_CommandStatusCback &rArr; HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandStatusCback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DisconnectCmd
</UL>

<P><STRONG><a name="[215]"></a>API_GetConnectNumeber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_c.o(i.API_GetConnectNumeber))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
</UL>

<P><STRONG><a name="[132]"></a>API_HostNumCompletedPktCmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, api_c.o(i.API_HostNumCompletedPktCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = API_HostNumCompletedPktCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_HostNumCompletedPktCmd
</UL>

<P><STRONG><a name="[134]"></a>API_LE_AddDeviceToResolvingList</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_c.o(i.API_LE_AddDeviceToResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddDeviceToResolvingList
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_AddDeviceToResolvingList
</UL>

<P><STRONG><a name="[136]"></a>API_LE_AddWhiteListCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_c.o(i.API_LE_AddWhiteListCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = API_LE_AddWhiteListCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddWhiteListDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_AddWhiteListCmd
</UL>

<P><STRONG><a name="[138]"></a>API_LE_ClearResolvingList</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_c.o(i.API_LE_ClearResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = API_LE_ClearResolvingList &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ClearResolvingList
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ClearResolvingList
</UL>

<P><STRONG><a name="[13a]"></a>API_LE_ClearWhiteListCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_c.o(i.API_LE_ClearWhiteListCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = API_LE_ClearWhiteListCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ClearWhiteList
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ClearWhiteListCmd
</UL>

<P><STRONG><a name="[13c]"></a>API_LE_ConnUpdateCmd</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, api_c.o(i.API_LE_ConnUpdateCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = API_LE_ConnUpdateCmd &rArr; LL_ConnUpdate &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandStatusCback
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ConnUpdateCmd
</UL>

<P><STRONG><a name="[13e]"></a>API_LE_CreateConnCancelCmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, api_c.o(i.API_LE_CreateConnCancelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = API_LE_CreateConnCancelCmd &rArr; LL_CreateConnCancel &rArr; LL_InitiateToStandby &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CreateConnCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CreateConnCancelCmd
</UL>

<P><STRONG><a name="[140]"></a>API_LE_LtkReqNegReplyCmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, api_c.o(i.API_LE_LtkReqNegReplyCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = API_LE_LtkReqNegReplyCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LtkReqNegReply
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LtkReqNegReplyCmd
</UL>

<P><STRONG><a name="[142]"></a>API_LE_LtkReqReplyCmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, api_c.o(i.API_LE_LtkReqReplyCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = API_LE_LtkReqReplyCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LtkReqReply
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LtkReqReplyCmd
</UL>

<P><STRONG><a name="[144]"></a>API_LE_RandCmd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, api_c.o(i.API_LE_RandCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = API_LE_RandCmd &rArr; LL_Rand &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rand
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_RandCmd
</UL>

<P><STRONG><a name="[146]"></a>API_LE_ReadBufSizeCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, api_c.o(i.API_LE_ReadBufSizeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = API_LE_ReadBufSizeCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_ReadBufSize
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadBufSizeCmd
</UL>

<P><STRONG><a name="[148]"></a>API_LE_RemoteConnParamReqNegReplyCmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, api_c.o(i.API_LE_RemoteConnParamReqNegReplyCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = API_LE_RemoteConnParamReqNegReplyCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoteConnParamReqNegReply
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_RemoteConnParamReqNegReplyCmd
</UL>

<P><STRONG><a name="[14a]"></a>API_LE_RemoteConnParamReqReplyCmd</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, api_c.o(i.API_LE_RemoteConnParamReqReplyCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = API_LE_RemoteConnParamReqReplyCmd &rArr; LL_RemoteConnParamReqReply &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoteConnParamReqReply
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_RemoteConnParamReqReplyCmd
</UL>

<P><STRONG><a name="[14c]"></a>API_LE_SetAddressResolvableEnableCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_c.o(i.API_LE_SetAddressResolvableEnableCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = API_LE_SetAddressResolvableEnableCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAddressResolvableEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAddressResolvableEnableCmd
</UL>

<P><STRONG><a name="[14e]"></a>API_LE_SetAdvDataCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_c.o(i.API_LE_SetAdvDataCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = API_LE_SetAdvDataCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvDataCmd
</UL>

<P><STRONG><a name="[150]"></a>API_LE_SetAdvEnableCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_c.o(i.API_LE_SetAdvEnableCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = API_LE_SetAdvEnableCmd &rArr; LL_SetAdvControl &rArr; ble_ll_common_rand16 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvEnableCmd
</UL>

<P><STRONG><a name="[152]"></a>API_LE_SetAdvParamCmd</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, api_c.o(i.API_LE_SetAdvParamCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = API_LE_SetAdvParamCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvParam
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvParamCmd
</UL>

<P><STRONG><a name="[154]"></a>API_LE_SetRandomAddressCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_c.o(i.API_LE_SetRandomAddressCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = API_LE_SetRandomAddressCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetRandomAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetRandomAddressCmd
</UL>

<P><STRONG><a name="[156]"></a>API_LE_SetResolvableAddressTimeoutCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_c.o(i.API_LE_SetResolvableAddressTimeoutCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = API_LE_SetResolvableAddressTimeoutCmd &rArr; LL_SetResolvableAddressTimeout &rArr; tmos_update_callback_timer &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetResolvableAddressTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetResolvableAddressTimeoutCmd
</UL>

<P><STRONG><a name="[158]"></a>API_LE_SetScanEnableCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_c.o(i.API_LE_SetScanEnableCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = API_LE_SetScanEnableCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetScanEnableCmd
</UL>

<P><STRONG><a name="[15a]"></a>API_LE_SetScanRspDataCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_c.o(i.API_LE_SetScanRspDataCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = API_LE_SetScanRspDataCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanRspData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetScanRspDataCmd
</UL>

<P><STRONG><a name="[15c]"></a>API_LE_StartEncryptCmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, api_c.o(i.API_LE_StartEncryptCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = API_LE_StartEncryptCmd &rArr; HCI_CommandStatusCback &rArr; HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandStatusCback
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_StartEncyptCmd
</UL>

<P><STRONG><a name="[15e]"></a>API_MD_DisconnectCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, api_c.o(i.API_MD_DisconnectCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = API_MD_DisconnectCmd &rArr; LL_MD_Disconnect &rArr; LL_ConnectToStandby &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MD_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_MB_DisconnectCmd
</UL>

<P><STRONG><a name="[160]"></a>API_ReadBDADDRCmd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, api_c.o(i.API_ReadBDADDRCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = API_ReadBDADDRCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadBDAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadBDADDRCmd
</UL>

<P><STRONG><a name="[162]"></a>API_SendDataPkt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, api_c.o(i.API_SendDataPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SendDataPkt
</UL>

<P><STRONG><a name="[42]"></a>ATT_BuildErrorRsp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, att.o(i.ATT_BuildErrorRsp))
<BR>[Address Reference Count : 1]<UL><LI> att.o(i.ATT_ErrorRsp)
</UL>
<P><STRONG><a name="[43]"></a>ATT_BuildExchangeMTURsp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, att_server.o(i.ATT_BuildExchangeMTURsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ExchangeMTURsp)
</UL>
<P><STRONG><a name="[44]"></a>ATT_BuildFindByTypeValueRsp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, att_server.o(i.ATT_BuildFindByTypeValueRsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_FindByTypeValueRsp)
</UL>
<P><STRONG><a name="[45]"></a>ATT_BuildFindInfoRsp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, att_server.o(i.ATT_BuildFindInfoRsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_FindInfoRsp)
</UL>
<P><STRONG><a name="[46]"></a>ATT_BuildHandleValueInd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, att_server.o(i.ATT_BuildHandleValueInd))
<BR>[Address Reference Count : 2]<UL><LI> att_server.o(i.ATT_HandleValueInd)
<LI> att_server.o(i.ATT_HandleValueNoti)
</UL>
<P><STRONG><a name="[47]"></a>ATT_BuildPrepareWriteRsp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, att_server.o(i.ATT_BuildPrepareWriteRsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_PrepareWriteRsp)
</UL>
<P><STRONG><a name="[48]"></a>ATT_BuildReadBlobRsp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, att_server.o(i.ATT_BuildReadBlobRsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadBlobRsp)
</UL>
<P><STRONG><a name="[49]"></a>ATT_BuildReadByGrpTypeRsp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, att_server.o(i.ATT_BuildReadByGrpTypeRsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadByGrpTypeRsp)
</UL>
<P><STRONG><a name="[4a]"></a>ATT_BuildReadByTypeRsp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, att_server.o(i.ATT_BuildReadByTypeRsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadByTypeRsp)
</UL>
<P><STRONG><a name="[4b]"></a>ATT_BuildReadMultiRsp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, att_server.o(i.ATT_BuildReadMultiRsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadMultiRsp)
</UL>
<P><STRONG><a name="[4c]"></a>ATT_BuildReadRsp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, att_server.o(i.ATT_BuildReadRsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadRsp)
</UL>
<P><STRONG><a name="[164]"></a>ATT_CompareUUID</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, att.o(i.ATT_CompareUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ConvertUUIDto128
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpTypeReq
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>

<P><STRONG><a name="[165]"></a>ATT_ConvertUUIDto128</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, att.o(i.ATT_ConvertUUIDto128))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>

<P><STRONG><a name="[166]"></a>ATT_ErrorRsp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, att.o(i.ATT_ErrorRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ATT_ErrorRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent
</UL>

<P><STRONG><a name="[168]"></a>ATT_ExchangeMTURsp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, att_server.o(i.ATT_ExchangeMTURsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ATT_ExchangeMTURsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[169]"></a>ATT_ExecuteWriteRsp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, att_server.o(i.ATT_ExecuteWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ATT_ExecuteWriteRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
</UL>

<P><STRONG><a name="[16a]"></a>ATT_FindByTypeValueRsp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, att_server.o(i.ATT_FindByTypeValueRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ATT_FindByTypeValueRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
</UL>

<P><STRONG><a name="[16c]"></a>ATT_FindInfoRsp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, att_server.o(i.ATT_FindInfoRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ATT_FindInfoRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
</UL>

<P><STRONG><a name="[16d]"></a>ATT_GetMTU</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, att.o(i.ATT_GetMTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ATT_GetMTU &rArr; linkDB_MTU &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_MTU
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetMTU
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>

<P><STRONG><a name="[170]"></a>ATT_HandleValueInd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, att_server.o(i.ATT_HandleValueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[172]"></a>ATT_HandleValueNoti</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, att_server.o(i.ATT_HandleValueNoti))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
</UL>

<P><STRONG><a name="[211]"></a>ATT_ParamInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, att.o(i.ATT_ParamInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
</UL>

<P><STRONG><a name="[89]"></a>ATT_ParseExchangeMTUReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_server.o(i.ATT_ParseExchangeMTUReq))
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>ATT_ParseExecuteWriteReq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, att_server.o(i.ATT_ParseExecuteWriteReq))
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>ATT_ParseFindByTypeValueReq</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, att_server.o(i.ATT_ParseFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ParseFindByTypeValueReq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>ATT_ParseFindInfoReq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, att_server.o(i.ATT_ParseFindInfoReq))
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>ATT_ParsePacket</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, att.o(i.ATT_ParsePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ATT_ParsePacket &rArr; SM_VerifyAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent
</UL>

<P><STRONG><a name="[99]"></a>ATT_ParsePrepareWriteReq</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, att_server.o(i.ATT_ParsePrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_ParsePrepareWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>ATT_ParseReadBlobReq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, att_server.o(i.ATT_ParseReadBlobReq))
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>ATT_ParseReadByTypeReq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, att_server.o(i.ATT_ParseReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_ParseReadByTypeReq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>ATT_ParseReadMultiReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_server.o(i.ATT_ParseReadMultiReq))
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>ATT_ParseReadReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_server.o(i.ATT_ParseReadReq))
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>ATT_ParseWriteReq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, att_server.o(i.ATT_ParseWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_ParseWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>ATT_PrepareWriteRsp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, att_server.o(i.ATT_PrepareWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ATT_PrepareWriteRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
</UL>

<P><STRONG><a name="[176]"></a>ATT_ReadBlobRsp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, att_server.o(i.ATT_ReadBlobRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ATT_ReadBlobRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[177]"></a>ATT_ReadByGrpTypeRsp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, att_server.o(i.ATT_ReadByGrpTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ATT_ReadByGrpTypeRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
</UL>

<P><STRONG><a name="[178]"></a>ATT_ReadByTypeRsp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, att_server.o(i.ATT_ReadByTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ATT_ReadByTypeRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
</UL>

<P><STRONG><a name="[179]"></a>ATT_ReadMultiRsp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, att_server.o(i.ATT_ReadMultiRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ATT_ReadMultiRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
</UL>

<P><STRONG><a name="[17a]"></a>ATT_ReadRsp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, att_server.o(i.ATT_ReadRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ATT_ReadRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[214]"></a>ATT_RegisterServer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, att.o(i.ATT_RegisterServer))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
</UL>

<P><STRONG><a name="[17b]"></a>ATT_UpdateMTU</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, att.o(i.ATT_UpdateMTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ATT_UpdateMTU &rArr; linkDB_UpdateMTU &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_UpdateMTU
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetMTU
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_UpdateMTU
</UL>

<P><STRONG><a name="[17d]"></a>ATT_WriteRsp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, att_server.o(i.ATT_WriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ATT_WriteRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
</UL>

<P><STRONG><a name="[186]"></a>BB_DevInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bb.o(i.BB_DevInit))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_SystemProcess
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RegInit
</UL>

<P><STRONG><a name="[17e]"></a>BLE_ADCTune</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ip.o(i.BLE_ADCTune))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BLE_ADCTune &rArr; RFEND_RXAdc
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFEND_RXAdc
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_temp_sample
</UL>

<P><STRONG><a name="[180]"></a>BLE_IPCoreInit</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, ip.o(i.BLE_IPCoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BLE_IPCoreInit &rArr; BLE_RegInit &rArr; RFEND_TXCtune &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RegInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[124]"></a>BLE_IRQHandler</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, lle.o(i.BLE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_SystemProcess
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_tx
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_timeout_process
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>BLE_LibInit</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, tmos.o(i.BLE_LibInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BLE_LibInit &rArr; TMOS_Init &rArr; tmos_snv_init &rArr; tmos_snv_clear &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_isbufset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57X_BLEInit
</UL>

<P><STRONG><a name="[122]"></a>BLE_RegInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ip.o(i.BLE_RegInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BLE_RegInit &rArr; RFEND_TXCtune &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFEND_TXFtune
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFEND_TXCtune
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFEND_RXFilter
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFEND_RXAdc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFEND_DevInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_DecError
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_DevInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DevInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DevInit
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IPCoreInit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_temp_sample
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ProcessEvent
</UL>

<P><STRONG><a name="[29b]"></a>CreatePRBS15</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ctl_input.o(i.CreatePRBS15))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CreatePRBS15
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TransmitterTest
</UL>

<P><STRONG><a name="[29a]"></a>CreatePRBS9</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ctl_input.o(i.CreatePRBS9))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CreatePRBS9
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TransmitterTest
</UL>

<P><STRONG><a name="[183]"></a>DMA_DevInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dma.o(i.DMA_DevInit))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_SystemProcess
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RegInit
</UL>

<P><STRONG><a name="[374]"></a>ErasePage</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, tmos_hw.o(i.ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_clear
</UL>

<P><STRONG><a name="[18a]"></a>GAPBondMgr_Erase</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gapbondmgr.o(i.GAPBondMgr_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GAPBondMgr_Erase &rArr; tmos_snv_clear &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
</UL>

<P><STRONG><a name="[111]"></a>GAPBondMgr_GetParameter</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, gapbondmgr.o(i.GAPBondMgr_GetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GAPBondMgr_GetParameter &rArr; gapBondMgrBondTotal &rArr; tmos_isbufset
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondTotal
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevBondCount
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevPasscodeCB
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
</UL>

<P><STRONG><a name="[18e]"></a>GAPBondMgr_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gapbondmgr.o(i.GAPBondMgr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GAPBondMgr_Init &rArr; gapBondMgrReadBonds &rArr; gapBondMgr_SyncResolveList &rArr; HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ParamInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralInit
</UL>

<P><STRONG><a name="[191]"></a>GAPBondMgr_LinkEst</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, gapbondmgr.o(i.GAPBondMgr_LinkEst))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_isbufset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrInvertCharCfgItem
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetStateFlags
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_UpdateCharCfg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessGAPMsg
</UL>

<P><STRONG><a name="[19c]"></a>GAPBondMgr_LinkTerm</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gapbondmgr.o(i.GAPBondMgr_LinkTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GAPBondMgr_LinkTerm &rArr; gapBondMgrReadBonds &rArr; gapBondMgr_SyncResolveList &rArr; HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_compact
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseAllBondings
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
</UL>

<P><STRONG><a name="[18f]"></a>GAPBondMgr_ParamInit</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, gapbondmgr.o(i.GAPBondMgr_ParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GAPBondMgr_ParamInit &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Init
</UL>

<P><STRONG><a name="[10c]"></a>GAPBondMgr_PasscodeRsp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gapbondmgr.o(i.GAPBondMgr_PasscodeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GAPBondMgr_PasscodeRsp &rArr; GAP_PasscodeUpdate &rArr; SM_PasskeyUpdate &rArr; sm_c1 &rArr; sm_c1new &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateAuth
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_PasscodeRsp
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevPasscodeCB
</UL>

<P><STRONG><a name="[1a4]"></a>GAPBondMgr_PeripheralRegister</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gapbondmgr.o(i.GAPBondMgr_PeripheralRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GAPBondMgr_PeripheralRegister &rArr; GAP_SetParamValue &rArr; HCI_LE_SetResolvableAddressTimeoutCmd &rArr; API_LE_SetResolvableAddressTimeoutCmd &rArr; LL_SetResolvableAddressTimeout &rArr; tmos_update_callback_timer &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterForMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralStartDevice
</UL>

<P><STRONG><a name="[54]"></a>GAPBondMgr_ProcessEvent</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, gapbondmgr.o(i.GAPBondMgr_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = GAPBondMgr_ProcessEvent &rArr; gapBondMgr_ProcessTMOSMsg &rArr; GAPBondMgr_ServiceChangeInd &rArr; gapBondMgrSendServiceChange &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_notify
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncCharCfg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_ProcessTMOSMsg
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondFreeAuthEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role.o(i.GAPRole_PeripheralInit)
</UL>
<P><STRONG><a name="[1ab]"></a>GAPBondMgr_ProcessGAPMsg</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, gapbondmgr.o(i.GAPBondMgr_ProcessGAPMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = GAPBondMgr_ProcessGAPMsg &rArr; GAPBondMgr_SetParameter &rArr; gapBondMgrReadBonds &rArr; gapBondMgr_SyncResolveList &rArr; HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_notify
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SlaveReqSecurity
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkTerm
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Erase
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondTotal
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateAuth
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessGAPMsg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_ProcessTMOSMsg
</UL>

<P><STRONG><a name="[192]"></a>GAPBondMgr_ResolveAddr</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, gapbondmgr.o(i.GAPBondMgr_ResolveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GAPBondMgr_ResolveAddr &rArr; GAP_ResolvePrivateAddr &rArr; SM_ResolveRandomAddrs &rArr; sm_ah &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_isbufset
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindAddr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ResolvePrivateAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_UpdateCharCfg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SlaveReqSecurity
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ServiceChangeInd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[1b3]"></a>GAPBondMgr_ServiceChangeInd</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gapbondmgr.o(i.GAPBondMgr_ServiceChangeInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = GAPBondMgr_ServiceChangeInd &rArr; gapBondMgrSendServiceChange &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_PerformFunc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrSendServiceChange
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrChangeState
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_ProcessTMOSMsg
</UL>

<P><STRONG><a name="[a8]"></a>GAPBondMgr_SetParameter</STRONG> (Thumb, 772 bytes, Stack size 56 bytes, gapbondmgr.o(i.GAPBondMgr_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = GAPBondMgr_SetParameter &rArr; gapBondMgrReadBonds &rArr; gapBondMgr_SyncResolveList &rArr; HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_write
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_notify
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_compact
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAddressResolvableEnableCmd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseAllBondings
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_SetParameter
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
</UL>

<P><STRONG><a name="[1af]"></a>GAPBondMgr_SlaveReqSecurity</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, gapbondmgr.o(i.GAPBondMgr_SlaveReqSecurity))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = GAPBondMgr_SlaveReqSecurity &rArr; gapBondMgrAuthenticate &rArr; GAP_Authenticate &rArr; SM_StartPairing &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetStateFlags
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateAuth
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
</UL>

<P><STRONG><a name="[1b6]"></a>GAPBondMgr_UpdateCharCfg</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, gapbondmgr.o(i.GAPBondMgr_UpdateCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GAPBondMgr_UpdateCharCfg &rArr; GAPBondMgr_ResolveAddr &rArr; GAP_ResolvePrivateAddr &rArr; SM_ResolveRandomAddrs &rArr; sm_ah &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncCharCfg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_ProcessTMOSMsg
</UL>

<P><STRONG><a name="[ae]"></a>GAPRole_GetParameter</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, role.o(i.GAPRole_GetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GAPRole_GetParameter &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidEmuStateCB
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRemoteConnParamReqEvt
</UL>

<P><STRONG><a name="[1b8]"></a>GAPRole_ParamInit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, role.o(i.GAPRole_ParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GAPRole_ParamInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[a1]"></a>GAPRole_PeripheralConnParamUpdateReq</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, peripheral.o(i.GAPRole_PeripheralConnParamUpdateReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = GAPRole_PeripheralConnParamUpdateReq &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateReq
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_ProcessEvent
</UL>

<P><STRONG><a name="[1ba]"></a>GAPRole_PeripheralEnable</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, peripheral.o(i.GAPRole_PeripheralEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GAPRole_PeripheralEnable &rArr; tmos_snv_read &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessEventRegister
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_RegisterForMsgs
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralInit
</UL>

<P><STRONG><a name="[b6]"></a>GAPRole_PeripheralInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, role.o(i.GAPRole_PeripheralInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = GAPRole_PeripheralInit &rArr; GAPBondMgr_Init &rArr; gapBondMgrReadBonds &rArr; gapBondMgr_SyncResolveList &rArr; HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessEventRegister
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlaveEnalbe
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_InitTasks
</UL>

<P><STRONG><a name="[4f]"></a>GAPRole_PeripheralProcessEvent</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, peripheral.o(i.GAPRole_PeripheralProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = GAPRole_PeripheralProcessEvent &rArr; gapRole_PeripheralProcessTMOSMsg &rArr; gapRole_PeripheralProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessTMOSMsg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_notify
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_PeripheralLinkNum
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peripheral.o(i.GAPRole_PeripheralEnable)
</UL>
<P><STRONG><a name="[fd]"></a>GAPRole_PeripheralStartDevice</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, peripheral.o(i.GAPRole_PeripheralStartDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GAPRole_PeripheralStartDevice &rArr; GAP_DeviceInit &rArr; GAP_ParamsInit &rArr; HCI_ReadBDADDRCmd &rArr; API_ReadBDADDRCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_PeripheralRegister
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterForPeriMsgs
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_ProcessEvent
</UL>

<P><STRONG><a name="[a6]"></a>GAPRole_SetParameter</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, role.o(i.GAPRole_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GAPRole_SetParameter &rArr; GAP_EndDiscoverable &rArr; HCI_LE_SetAdvEnableCmd &rArr; API_LE_SetAdvEnableCmd &rArr; LL_SetAdvControl &rArr; ble_ll_common_rand16 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Close
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevGapStateCB
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevDisconnected
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevInitialAdvertising
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Report
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_Init
</UL>

<P><STRONG><a name="[fe]"></a>GAPRole_TerminateLink</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, role.o(i.GAPRole_TerminateLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GAPRole_TerminateLink &rArr; GAP_TerminateLinkReq &rArr; disconnectNext &rArr; HCI_DisconnectCmd &rArr; API_DisconnectCmd &rArr; HCI_CommandStatusCback &rArr; HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_SetParameter
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Close
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_ProcessEvent
</UL>

<P><STRONG><a name="[1ca]"></a>GAP_Authenticate</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gap.o(i.GAP_Authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GAP_Authenticate &rArr; SM_StartPairing &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessPairingReq
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate
</UL>

<P><STRONG><a name="[1ce]"></a>GAP_Bond</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, gap.o(i.GAP_Bond))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GAP_Bond &rArr; tmos_memdup &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memdup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartEncryption
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
</UL>

<P><STRONG><a name="[1d2]"></a>GAP_CentConnRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_central.o(i.GAP_CentConnRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAP_CentConnRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRegisterCentralConn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[1d4]"></a>GAP_CentDevMgrInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gap_central.o(i.GAP_CentDevMgrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GAP_CentDevMgrInit &rArr; gapFreeScanRecs &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRegisterCentral
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeScanRecs
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[1e4]"></a>GAP_CentralParamInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gap_central.o(i.GAP_CentralParamInit))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[af]"></a>GAP_ConfigDeviceAddr</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, gap_peripheral.o(i.GAP_ConfigDeviceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GAP_ConfigDeviceAddr &rArr; SM_CalcRandomAddr &rArr; sm_ah &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_reload_task
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidEmuStateCB
</UL>

<P><STRONG><a name="[1c7]"></a>GAP_DeviceInit</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, gapgattserver.o(i.GAP_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GAP_DeviceInit &rArr; GAP_ParamsInit &rArr; HCI_ReadBDADDRCmd &rArr; API_ReadBDADDRCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResponderInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_InitiatorInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentConnRegister
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriConnRegister
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SecParamsInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralStartDevice
</UL>

<P><STRONG><a name="[1c8]"></a>GAP_EndDiscoverable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gap_peripheral.o(i.GAP_EndDiscoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GAP_EndDiscoverable &rArr; HCI_LE_SetAdvEnableCmd &rArr; API_LE_SetAdvEnableCmd &rArr; LL_SetAdvControl &rArr; ble_ll_common_rand16 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvEnableCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt
</UL>

<P><STRONG><a name="[18d]"></a>GAP_GetParamValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gap.o(i.GAP_GetParamValue))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_GetParameter
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingReq
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningDirectEvt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentProcessConnEvt
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable
</UL>

<P><STRONG><a name="[1be]"></a>GAP_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gap.o(i.GAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GAP_Init &rArr; GAPRole_ParamInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterApp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeripheralParamInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentralParamInit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ParamInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralInit
</UL>

<P><STRONG><a name="[1c5]"></a>GAP_MakeDiscoverable</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, gap_peripheral.o(i.GAP_MakeDiscoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; HCI_LE_SetAdvParamCmd &rArr; API_LE_SetAdvParamCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_reload_task
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_NumConns
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetIRK
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralProcessEvent
</UL>

<P><STRONG><a name="[19d]"></a>GAP_NumActiveConnections</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gap.o(i.GAP_NumActiveConnections))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GAP_NumActiveConnections &rArr; linkDB_NumActive
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_NumActive
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkTerm
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
</UL>

<P><STRONG><a name="[1e2]"></a>GAP_ParamInit</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, gap.o(i.GAP_ParamInit))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[1db]"></a>GAP_ParamsInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gap.o(i.GAP_ParamsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GAP_ParamsInit &rArr; HCI_ReadBDADDRCmd &rArr; API_ReadBDADDRCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadBDADDRCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[1a2]"></a>GAP_PasscodeUpdate</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gap.o(i.GAP_PasscodeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GAP_PasscodeUpdate &rArr; SM_PasskeyUpdate &rArr; sm_c1 &rArr; sm_c1new &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_PasscodeRsp
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondPasscodeCB
</UL>

<P><STRONG><a name="[1df]"></a>GAP_PeriConnRegister</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gap_peripheral.o(i.GAP_PeriConnRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAP_PeriConnRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRegisterPeripheralConn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[1dc]"></a>GAP_PeriDevMgrInit</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, gap_peripheral.o(i.GAP_PeriDevMgrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GAP_PeriDevMgrInit &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRegisterPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[1e3]"></a>GAP_PeripheralParamInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gap_peripheral.o(i.GAP_PeripheralParamInit))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[51]"></a>GAP_ProcessEvent</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, gap.o(i.GAP_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GAP_ProcessEvent &rArr; gapProcessTMOSMsg &rArr; gapProcessRemoteConnParamReqEvt &rArr; HCI_LE_RemoteConnParamReqReplyCmd &rArr; API_LE_RemoteConnParamReqReplyCmd &rArr; LL_RemoteConnParamReqReply &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessTMOSMsg
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role.o(i.GAPRole_PeripheralInit)
</UL>
<P><STRONG><a name="[1bb]"></a>GAP_RegisterForMsgs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap.o(i.GAP_RegisterForMsgs))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralEnable
</UL>

<P><STRONG><a name="[1b1]"></a>GAP_ResolvePrivateAddr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gap.o(i.GAP_ResolvePrivateAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GAP_ResolvePrivateAddr &rArr; SM_ResolveRandomAddrs &rArr; sm_ah &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>

<P><STRONG><a name="[1dd]"></a>GAP_SecParamsInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gap.o(i.GAP_SecParamsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GAP_SecParamsInit &rArr; smGenerateRandBuf &rArr; tmos_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_isbufset
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[19b]"></a>GAP_SendSlaveSecurityRequest</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, gap.o(i.GAP_SendSlaveSecurityRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = GAP_SendSlaveSecurityRequest &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[106]"></a>GAP_SetParamValue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gap.o(i.GAP_SetParamValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GAP_SetParamValue &rArr; HCI_LE_SetResolvableAddressTimeoutCmd &rArr; API_LE_SetResolvableAddressTimeoutCmd &rArr; LL_SetResolvableAddressTimeout &rArr; tmos_update_callback_timer &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetResolvableAddressTimeoutCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevDisconnected
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevInitialAdvertising
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Report
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_PeripheralRegister
</UL>

<P><STRONG><a name="[196]"></a>GAP_Signable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gap.o(i.GAP_Signable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GAP_Signable &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[1a3]"></a>GAP_TerminateAuth</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gap.o(i.GAP_TerminateAuth))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = GAP_TerminateAuth &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_PasscodeRsp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SlaveReqSecurity
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondPasscodeCB
</UL>

<P><STRONG><a name="[1ad]"></a>GAP_TerminateLinkReq</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, gap.o(i.GAP_TerminateLinkReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GAP_TerminateLinkReq &rArr; disconnectNext &rArr; HCI_DisconnectCmd &rArr; API_DisconnectCmd &rArr; HCI_CommandStatusCback &rArr; HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DisconnectCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateLink
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
</UL>

<P><STRONG><a name="[1c9]"></a>GAP_UpdateAdvertisingData</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, gap_peripheral.o(i.GAP_UpdateAdvertisingData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GAP_UpdateAdvertisingData &rArr; HCI_LE_SetScanRspDataCmd &rArr; API_LE_SetScanRspDataCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetScanRspDataCmd
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvDataCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessGAPMsg
</UL>

<P><STRONG><a name="[101]"></a>GATTServApp_AddService</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gattservapp.o(i.GATTServApp_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GATTServApp_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Init
</UL>

<P><STRONG><a name="[1c1]"></a>GATTServApp_Init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GATTServApp_Init &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ParamInit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralInit
</UL>

<P><STRONG><a name="[e8]"></a>GATTServApp_InitCharCfg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_InitCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanParam_HandleConnStatusCB
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanParam_AddService
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevDisconnected
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_HandleConnStatusCB
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_AddService
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_AddService
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
</UL>

<P><STRONG><a name="[1f9]"></a>GATTServApp_ParamInit</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, gattservapp.o(i.GATTServApp_ParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GATTServApp_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
</UL>

<P><STRONG><a name="[f3]"></a>GATTServApp_ProcessCCCWriteReq</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_ProcessCCCWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_WriteCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanParamWriteAttrCB
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_WriteAttrCB
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battWriteAttrCB
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_WriteAttrCB
</UL>

<P><STRONG><a name="[55]"></a>GATTServApp_ProcessEvent</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = GATTServApp_ProcessEvent &rArr; gattServApp_ProcessMsg &rArr; gattServApp_ProcessReadByGrpTypeReq &rArr; ATT_ReadByGrpTypeRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_free
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role.o(i.GAPRole_PeripheralInit)
</UL>
<P><STRONG><a name="[1fe]"></a>GATTServApp_ReadAttr</STRONG> (Thumb, 540 bytes, Stack size 56 bytes, gattservapp.o(i.GATTServApp_ReadAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GATTServApp_ReadAttr &rArr; GATT_FindNextAttr &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_strlen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncCharCfg
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[ea]"></a>GATTServApp_ReadCharCfg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gattservapp.o(i.GATTServApp_ReadCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanParam_RefreshNotify
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevSendReport
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battNotifyCB
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>

<P><STRONG><a name="[1a5]"></a>GATTServApp_RegisterForMsg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gattservapp.o(i.GATTServApp_RegisterForMsg))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_PeripheralRegister
</UL>

<P><STRONG><a name="[e9]"></a>GATTServApp_RegisterService</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_RegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanParam_AddService
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_AddService
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_AddService
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_AddService
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_AddService
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_AddService
</UL>

<P><STRONG><a name="[204]"></a>GATTServApp_SendCCCUpdatedEvent</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_SendCCCUpdatedEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GATTServApp_SendCCCUpdatedEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
</UL>

<P><STRONG><a name="[199]"></a>GATTServApp_SendServiceChangedInd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_SendServiceChangedInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrSendServiceChange
</UL>

<P><STRONG><a name="[198]"></a>GATTServApp_UpdateCharCfg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_UpdateCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GATTServApp_UpdateCharCfg &rArr; GATTServApp_WriteAttr &rArr; GATTServApp_SendCCCUpdatedEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[207]"></a>GATTServApp_WriteAttr</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, gattservapp.o(i.GATTServApp_WriteAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GATTServApp_WriteAttr &rArr; GATTServApp_SendCCCUpdatedEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_UpdateCharCfg
</UL>

<P><STRONG><a name="[1fc]"></a>GATTServApp_WriteCharCfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_WriteCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATTServApp_WriteCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>

<P><STRONG><a name="[208]"></a>GATT_AppCompletedMsg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gatt.o(i.GATT_AppCompletedMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GATT_AppCompletedMsg &rArr; L2CAP_HostNumCompletedPkts &rArr; HCI_HostNumCompletedPktCmd &rArr; API_HostNumCompletedPktCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[fc]"></a>GATT_FindHandle</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, gattservapp.o(i.GATT_FindHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GATT_FindHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevDisconnected
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevSendReport
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteReq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadReq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadMultiReq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessPrepareWriteReq
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[20a]"></a>GATT_FindHandleUUID</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, gattservapp.o(i.GATT_FindHandleUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncCharCfg
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByTypeReq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpTypeReq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindByTypeValueReq
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
</UL>

<P><STRONG><a name="[201]"></a>GATT_FindNextAttr</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gattservapp.o(i.GATT_FindNextAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GATT_FindNextAttr &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServiceLastHandle
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncCharCfg
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>

<P><STRONG><a name="[20c]"></a>GATT_Indication</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, gattservapp.o(i.GATT_Indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueInd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceEncKeySize
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetServerStatus
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
</UL>

<P><STRONG><a name="[1bf]"></a>GATT_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gatt.o(i.GATT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_Init &rArr; GATT_InitServer
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParamInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterApp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralInit
</UL>

<P><STRONG><a name="[212]"></a>GATT_InitServer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gattservapp.o(i.GATT_InitServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATT_InitServer
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_RegisterServer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattRegisterServer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
</UL>

<P><STRONG><a name="[ec]"></a>GATT_Notification</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gattservapp.o(i.GATT_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueNoti
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceEncKeySize
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetServerStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GetConnectNumeber
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanParam_RefreshNotify
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_sendNoti
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battNotifyCB
</UL>

<P><STRONG><a name="[216]"></a>GATT_NotifyEvent</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gatt.o(i.GATT_NotifyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GATT_NotifyEvent &rArr; gattNotifyEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
</UL>

<P><STRONG><a name="[52]"></a>GATT_ProcessEvent</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, gatt.o(i.GATT_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GATT_ProcessEvent &rArr; ATT_ErrorRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParsePacket
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role.o(i.GAPRole_PeripheralInit)
</UL>
<P><STRONG><a name="[1c6]"></a>GATT_RegisterForPeriMsgs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt.o(i.GATT_RegisterForPeriMsgs))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralStartDevice
</UL>

<P><STRONG><a name="[203]"></a>GATT_RegisterService</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, gattservapp.o(i.GATT_RegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>

<P><STRONG><a name="[206]"></a>GATT_ServiceChangedInd</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gatt.o(i.GATT_ServiceChangedInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
</UL>

<P><STRONG><a name="[20e]"></a>GATT_ServiceEncKeySize</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gattservapp.o(i.GATT_ServiceEncKeySize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GATT_ServiceEncKeySize
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindService
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyWritePermissions
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyPrepareWritePermissions
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[219]"></a>GATT_ServiceNumAttrs</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gattservapp.o(i.GATT_ServiceNumAttrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GATT_ServiceNumAttrs
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindService
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServiceLastHandle
</UL>

<P><STRONG><a name="[21a]"></a>GATT_UpdateMTU</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gatt.o(i.GATT_UpdateMTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GATT_UpdateMTU &rArr; gattNotifyEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMTU
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[21b]"></a>GATT_VerifyPrepareWritePermissions</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gattservapp.o(i.GATT_VerifyPrepareWritePermissions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GATT_VerifyPrepareWritePermissions &rArr; linkDB_Authen &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceEncKeySize
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessPrepareWriteReq
</UL>

<P><STRONG><a name="[21c]"></a>GATT_VerifyReadPermissions</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, gattservapp.o(i.GATT_VerifyReadPermissions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GATT_VerifyReadPermissions &rArr; linkDB_Authen &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceEncKeySize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadReq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadMultiReq
</UL>

<P><STRONG><a name="[21d]"></a>GATT_VerifyWritePermissions</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gattservapp.o(i.GATT_VerifyWritePermissions))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GATT_VerifyWritePermissions &rArr; linkDB_Authen &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceEncKeySize
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteReq
</UL>

<P><STRONG><a name="[eb]"></a>GATT_bm_alloc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, gatt.o(i.GATT_bm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GATT_bm_alloc &rArr; L2CAP_bm_alloc &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetMTU
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanParam_RefreshNotify
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_sendNoti
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battNotifyCB
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
</UL>

<P><STRONG><a name="[ed]"></a>GATT_bm_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatt.o(i.GATT_bm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_bm_free &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanParam_RefreshNotify
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_sendNoti
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battNotifyCB
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_ProcessTMOSMsg
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[100]"></a>GGS_AddService</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gapgattserver.o(i.GGS_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GGS_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Init
</UL>

<P><STRONG><a name="[1f8]"></a>GGS_ParamInit</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, gapgattserver.o(i.GGS_ParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GGS_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
</UL>

<P><STRONG><a name="[a7]"></a>GGS_SetParameter</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, gapgattserver.o(i.GGS_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GGS_SetParameter &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_SetAttrWPermit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_Init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondSetupPrivFlag
</UL>

<P><STRONG><a name="[31e]"></a>GetTxPower</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ip.o(i.GetTxPower))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseCreateCore
</UL>

<P><STRONG><a name="[288]"></a>HCI_AuthenticatedPayloadTimeoutExpiredCback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ctl_output.o(i.HCI_AuthenticatedPayloadTimeoutExpiredCback))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[133]"></a>HCI_CommandCompleteCback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctl_output.o(i.HCI_CommandCompleteCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_CommandCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ReadBDADDRCmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetScanRspDataCmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetScanEnableCmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetResolvableAddressTimeoutCmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetRandomAddressCmd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetAdvParamCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetAdvEnableCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetAdvDataCmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetAddressResolvableEnableCmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_RemoteConnParamReqReplyCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_RemoteConnParamReqNegReplyCmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_ReadBufSizeCmd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_RandCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_LtkReqReplyCmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_LtkReqNegReplyCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_CreateConnCancelCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_ClearWhiteListCmd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_ClearResolvingList
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_AddWhiteListCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_AddDeviceToResolvingList
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_HostNumCompletedPktCmd
</UL>

<P><STRONG><a name="[131]"></a>HCI_CommandStatusCback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctl_output.o(i.HCI_CommandStatusCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HCI_CommandStatusCback &rArr; HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_CommandStatusEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_StartEncryptCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_ConnUpdateCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_DisconnectCmd
</UL>

<P><STRONG><a name="[223]"></a>HCI_DataBufferOverflowCback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctl_output.o(i.HCI_DataBufferOverflowCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HCI_DataBufferOverflowCback &rArr; HOST_DataBufferOverflowEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_DataBufferOverflowEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[1f5]"></a>HCI_DisconnectCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_DisconnectCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCI_DisconnectCmd &rArr; API_DisconnectCmd &rArr; HCI_CommandStatusCback &rArr; HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_DisconnectCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
</UL>

<P><STRONG><a name="[225]"></a>HCI_DisconnectionCompleteCback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctl_output.o(i.HCI_DisconnectionCompleteCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HCI_DisconnectionCompleteCback &rArr; HOST_DisconnectionCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_DisconnectionCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[227]"></a>HCI_EncryptionChangeCback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctl_output.o(i.HCI_EncryptionChangeCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HCI_EncryptionChangeCback &rArr; HOST_EncryptionChangeEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_EncryptionChangeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[229]"></a>HCI_EncryptionKeyRefreshCompleteCback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctl_output.o(i.HCI_EncryptionKeyRefreshCompleteCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HCI_EncryptionKeyRefreshCompleteCback &rArr; HOST_EncryptionKeyRefreshCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_EncryptionKeyRefreshCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[22b]"></a>HCI_HostNumCompletedPktCmd</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, host_output.o(i.HCI_HostNumCompletedPktCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCI_HostNumCompletedPktCmd &rArr; API_HostNumCompletedPktCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_HostNumCompletedPktCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
</UL>

<P><STRONG><a name="[22c]"></a>HCI_LE_AddDeviceToResolvingList</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_AddDeviceToResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_AddDeviceToResolvingList
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncResolveList
</UL>

<P><STRONG><a name="[22d]"></a>HCI_LE_AddWhiteListCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_AddWhiteListCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCI_LE_AddWhiteListCmd &rArr; API_LE_AddWhiteListCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_AddWhiteListCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncWhiteList
</UL>

<P><STRONG><a name="[22e]"></a>HCI_LE_ClearResolvingList</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_ClearResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCI_LE_ClearResolvingList &rArr; API_LE_ClearResolvingList &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_ClearResolvingList
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncResolveList
</UL>

<P><STRONG><a name="[22f]"></a>HCI_LE_ClearWhiteListCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_ClearWhiteListCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCI_LE_ClearWhiteListCmd &rArr; API_LE_ClearWhiteListCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_ClearWhiteListCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncWhiteList
</UL>

<P><STRONG><a name="[230]"></a>HCI_LE_ConnUpdateCmd</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, host_output.o(i.HCI_LE_ConnUpdateCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HCI_LE_ConnUpdateCmd &rArr; API_LE_ConnUpdateCmd &rArr; LL_ConnUpdate &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_ConnUpdateCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentProcessConnEvt
</UL>

<P><STRONG><a name="[231]"></a>HCI_LE_ConnectionCompleteCback</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, ctl_output.o(i.HCI_LE_ConnectionCompleteCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HCI_LE_ConnectionCompleteCback &rArr; HOST_LE_ConnectionCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_ConnectionCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[233]"></a>HCI_LE_ConnectionUpdateCompleteCback</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ctl_output.o(i.HCI_LE_ConnectionUpdateCompleteCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCI_LE_ConnectionUpdateCompleteCback &rArr; HOST_LE_ConnectionUpdateCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_ConnectionUpdateCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[235]"></a>HCI_LE_CreateConnCancelCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_CreateConnCancelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HCI_LE_CreateConnCancelCmd &rArr; API_LE_CreateConnCancelCmd &rArr; LL_CreateConnCancel &rArr; LL_InitiateToStandby &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_CreateConnCancelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCancelLinkReq
</UL>

<P><STRONG><a name="[236]"></a>HCI_LE_DataLengthChangeCback</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ctl_output.o(i.HCI_LE_DataLengthChangeCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCI_LE_DataLengthChangeCback &rArr; HOST_LE_DataLengthChangeEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_DataLengthChangeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[238]"></a>HCI_LE_EnhancedConnectionCompleteCback</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, ctl_output.o(i.HCI_LE_EnhancedConnectionCompleteCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HCI_LE_EnhancedConnectionCompleteCback &rArr; HOST_LE_EnhancedConnectionCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_EnhancedConnectionCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[23a]"></a>HCI_LE_LongTermKeyRequestCback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctl_output.o(i.HCI_LE_LongTermKeyRequestCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HCI_LE_LongTermKeyRequestCback &rArr; HOST_LE_LongTermKeyRequestEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_LongTermKeyRequestEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[23c]"></a>HCI_LE_LtkReqNegReplyCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_LtkReqNegReplyCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HCI_LE_LtkReqNegReplyCmd &rArr; API_LE_LtkReqNegReplyCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_LtkReqNegReplyCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
</UL>

<P><STRONG><a name="[23d]"></a>HCI_LE_LtkReqReplyCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_LtkReqReplyCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HCI_LE_LtkReqReplyCmd &rArr; API_LE_LtkReqReplyCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_LtkReqReplyCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
</UL>

<P><STRONG><a name="[23e]"></a>HCI_LE_RandCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_RandCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HCI_LE_RandCmd &rArr; API_LE_RandCmd &rArr; LL_Rand &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_RandCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete
</UL>

<P><STRONG><a name="[23f]"></a>HCI_LE_ReadBufSizeCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_ReadBufSizeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCI_LE_ReadBufSizeCmd &rArr; API_LE_ReadBufSizeCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_ReadBufSizeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessTMOSMsg
</UL>

<P><STRONG><a name="[240]"></a>HCI_LE_ReadRemoteUsedFeaturesCompleteCback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctl_output.o(i.HCI_LE_ReadRemoteUsedFeaturesCompleteCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HCI_LE_ReadRemoteUsedFeaturesCompleteCback &rArr; HOST_LE_ReadRemoteUsedFeaturesCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_ReadRemoteUsedFeaturesCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[242]"></a>HCI_LE_RemoteConnParamReqNegReplyCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_RemoteConnParamReqNegReplyCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HCI_LE_RemoteConnParamReqNegReplyCmd &rArr; API_LE_RemoteConnParamReqNegReplyCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_RemoteConnParamReqNegReplyCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRemoteConnParamReqEvt
</UL>

<P><STRONG><a name="[243]"></a>HCI_LE_RemoteConnParamReqReplyCmd</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, host_output.o(i.HCI_LE_RemoteConnParamReqReplyCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HCI_LE_RemoteConnParamReqReplyCmd &rArr; API_LE_RemoteConnParamReqReplyCmd &rArr; LL_RemoteConnParamReqReply &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_RemoteConnParamReqReplyCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRemoteConnParamReqEvt
</UL>

<P><STRONG><a name="[244]"></a>HCI_LE_RemoteConnectionParameterRequestCback</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ctl_output.o(i.HCI_LE_RemoteConnectionParameterRequestCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCI_LE_RemoteConnectionParameterRequestCback &rArr; HOST_LE_RemoteConnectionParameterRequestEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_RemoteConnectionParameterRequestEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[1b5]"></a>HCI_LE_SetAddressResolvableEnableCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_SetAddressResolvableEnableCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCI_LE_SetAddressResolvableEnableCmd &rArr; API_LE_SetAddressResolvableEnableCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetAddressResolvableEnableCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
</UL>

<P><STRONG><a name="[1f6]"></a>HCI_LE_SetAdvDataCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_SetAdvDataCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCI_LE_SetAdvDataCmd &rArr; API_LE_SetAdvDataCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetAdvDataCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData
</UL>

<P><STRONG><a name="[1e1]"></a>HCI_LE_SetAdvEnableCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_SetAdvEnableCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HCI_LE_SetAdvEnableCmd &rArr; API_LE_SetAdvEnableCmd &rArr; LL_SetAdvControl &rArr; ble_ll_common_rand16 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetAdvEnableCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[246]"></a>HCI_LE_SetAdvParamCmd</STRONG> (Thumb, 22 bytes, Stack size 40 bytes, host_output.o(i.HCI_LE_SetAdvParamCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HCI_LE_SetAdvParamCmd &rArr; API_LE_SetAdvParamCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetAdvParamCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
</UL>

<P><STRONG><a name="[247]"></a>HCI_LE_SetRandomAddressCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_SetRandomAddressCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCI_LE_SetRandomAddressCmd &rArr; API_LE_SetRandomAddressCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetRandomAddressCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
</UL>

<P><STRONG><a name="[1f2]"></a>HCI_LE_SetResolvableAddressTimeoutCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_SetResolvableAddressTimeoutCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HCI_LE_SetResolvableAddressTimeoutCmd &rArr; API_LE_SetResolvableAddressTimeoutCmd &rArr; LL_SetResolvableAddressTimeout &rArr; tmos_update_callback_timer &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetResolvableAddressTimeoutCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
</UL>

<P><STRONG><a name="[248]"></a>HCI_LE_SetScanEnableCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_SetScanEnableCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCI_LE_SetScanEnableCmd &rArr; API_LE_SetScanEnableCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetScanEnableCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable
</UL>

<P><STRONG><a name="[1f7]"></a>HCI_LE_SetScanRspDataCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_LE_SetScanRspDataCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCI_LE_SetScanRspDataCmd &rArr; API_LE_SetScanRspDataCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetScanRspDataCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData
</UL>

<P><STRONG><a name="[249]"></a>HCI_LE_StartEncyptCmd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, host_output.o(i.HCI_LE_StartEncyptCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCI_LE_StartEncyptCmd &rArr; API_LE_StartEncryptCmd &rArr; HCI_CommandStatusCback &rArr; HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_StartEncryptCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartEncryption
</UL>

<P><STRONG><a name="[24a]"></a>HCI_MB_DisconnectCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_MB_DisconnectCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HCI_MB_DisconnectCmd &rArr; API_MD_DisconnectCmd &rArr; LL_MD_Disconnect &rArr; LL_ConnectToStandby &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MD_DisconnectCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
</UL>

<P><STRONG><a name="[24b]"></a>HCI_NumberOfCompletedPacketsCback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctl_output.o(i.HCI_NumberOfCompletedPacketsCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HCI_NumberOfCompletedPacketsCback &rArr; HOST_NumberOfCompletedPacketsEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_NumberOfCompletedPacketsEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[1ea]"></a>HCI_ReadBDADDRCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_ReadBDADDRCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HCI_ReadBDADDRCmd &rArr; API_ReadBDADDRCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ReadBDADDRCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit
</UL>

<P><STRONG><a name="[24d]"></a>HCI_ReadRemoteVersionInfoCback</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ctl_output.o(i.HCI_ReadRemoteVersionInfoCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCI_ReadRemoteVersionInfoCback &rArr; HOST_ReadRemoteVersionInfoEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_ReadRemoteVersionInfoEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[24f]"></a>HCI_RemoteConnectionParameterRequestCback</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ctl_output.o(i.HCI_RemoteConnectionParameterRequestCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = HCI_RemoteConnectionParameterRequestCback &rArr; HOST_RemoteConnectionParameterRequestEvent &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_RemoteConnectionParameterRequestEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[251]"></a>HCI_RxDataCompleteCback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctl_output.o(i.HCI_RxDataCompleteCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCI_RxDataCompleteCback &rArr; HOST_RecvDataPackets &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_RecvDataPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[253]"></a>HCI_SendDataPkt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, host_output.o(i.HCI_SendDataPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SendDataPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>

<P><STRONG><a name="[2c2]"></a>HCI_ValidConnTimeParams</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, host_output.o(i.HCI_ValidConnTimeParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCI_ValidConnTimeParams
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentProcessConnEvt
</UL>

<P><STRONG><a name="[221]"></a>HOST_CommandCompleteEvent</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, host_input.o(i.HOST_CommandCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteCback
</UL>

<P><STRONG><a name="[222]"></a>HOST_CommandStatusEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, host_input.o(i.HOST_CommandStatusEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandStatusCback
</UL>

<P><STRONG><a name="[224]"></a>HOST_DataBufferOverflowEvent</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, host_input.o(i.HOST_DataBufferOverflowEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HOST_DataBufferOverflowEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DataBufferOverflowCback
</UL>

<P><STRONG><a name="[226]"></a>HOST_DisconnectionCompleteEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, host_input.o(i.HOST_DisconnectionCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HOST_DisconnectionCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DisconnectionCompleteCback
</UL>

<P><STRONG><a name="[228]"></a>HOST_EncryptionChangeEvent</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, host_input.o(i.HOST_EncryptionChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HOST_EncryptionChangeEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_EncryptionChangeCback
</UL>

<P><STRONG><a name="[22a]"></a>HOST_EncryptionKeyRefreshCompleteEvent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, host_input.o(i.HOST_EncryptionKeyRefreshCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HOST_EncryptionKeyRefreshCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_EncryptionKeyRefreshCompleteCback
</UL>

<P><STRONG><a name="[232]"></a>HOST_LE_ConnectionCompleteEvent</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, host_input.o(i.HOST_LE_ConnectionCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HOST_LE_ConnectionCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ConnectionCompleteCback
</UL>

<P><STRONG><a name="[234]"></a>HOST_LE_ConnectionUpdateCompleteEvent</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, host_input.o(i.HOST_LE_ConnectionUpdateCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HOST_LE_ConnectionUpdateCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ConnectionUpdateCompleteCback
</UL>

<P><STRONG><a name="[237]"></a>HOST_LE_DataLengthChangeEvent</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, host_input.o(i.HOST_LE_DataLengthChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HOST_LE_DataLengthChangeEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_DataLengthChangeCback
</UL>

<P><STRONG><a name="[239]"></a>HOST_LE_EnhancedConnectionCompleteEvent</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, host_input.o(i.HOST_LE_EnhancedConnectionCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HOST_LE_EnhancedConnectionCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_EnhancedConnectionCompleteCback
</UL>

<P><STRONG><a name="[23b]"></a>HOST_LE_LongTermKeyRequestEvent</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, host_input.o(i.HOST_LE_LongTermKeyRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HOST_LE_LongTermKeyRequestEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LongTermKeyRequestCback
</UL>

<P><STRONG><a name="[241]"></a>HOST_LE_ReadRemoteUsedFeaturesCompleteEvent</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, host_input.o(i.HOST_LE_ReadRemoteUsedFeaturesCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HOST_LE_ReadRemoteUsedFeaturesCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadRemoteUsedFeaturesCompleteCback
</UL>

<P><STRONG><a name="[245]"></a>HOST_LE_RemoteConnectionParameterRequestEvent</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, host_input.o(i.HOST_LE_RemoteConnectionParameterRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HOST_LE_RemoteConnectionParameterRequestEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_RemoteConnectionParameterRequestCback
</UL>

<P><STRONG><a name="[24c]"></a>HOST_NumberOfCompletedPacketsEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, host_input.o(i.HOST_NumberOfCompletedPacketsEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HOST_NumberOfCompletedPacketsEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_NumberOfCompletedPacketsCback
</UL>

<P><STRONG><a name="[24e]"></a>HOST_ReadRemoteVersionInfoEvent</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, host_input.o(i.HOST_ReadRemoteVersionInfoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HOST_ReadRemoteVersionInfoEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadRemoteVersionInfoCback
</UL>

<P><STRONG><a name="[252]"></a>HOST_RecvDataPackets</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, host_input.o(i.HOST_RecvDataPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HOST_RecvDataPackets &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RxDataCompleteCback
</UL>

<P><STRONG><a name="[250]"></a>HOST_RemoteConnectionParameterRequestEvent</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, host_input.o(i.HOST_RemoteConnectionParameterRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = HOST_RemoteConnectionParameterRequestEvent &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateReq
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RemoteConnectionParameterRequestCback
</UL>

<P><STRONG><a name="[254]"></a>L2CAP_CmdReject</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, l2cap_sdu.o(i.L2CAP_CmdReject))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessConnEvt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessConnectReq
</UL>

<P><STRONG><a name="[1b9]"></a>L2CAP_ConnParamUpdateReq</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, l2cap_sdu.o(i.L2CAP_ConnParamUpdateReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralConnParamUpdateReq
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapL2capConnParamUpdateReq
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_RemoteConnectionParameterRequestEvent
</UL>

<P><STRONG><a name="[257]"></a>L2CAP_ConnParamUpdateRsp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, l2cap_sdu.o(i.L2CAP_ConnParamUpdateRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = L2CAP_ConnParamUpdateRsp &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentProcessConnEvt
</UL>

<P><STRONG><a name="[258]"></a>L2CAP_DisconnectReq</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, l2cap_sdu.o(i.L2CAP_DisconnectReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = L2CAP_DisconnectReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capDisconnectChannel
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capDisconnectAllChannels
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[16e]"></a>L2CAP_GetMTU</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, l2cap.o(i.L2CAP_GetMTU))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMTU
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetMTU
</UL>

<P><STRONG><a name="[209]"></a>L2CAP_HostNumCompletedPkts</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, l2cap.o(i.L2CAP_HostNumCompletedPkts))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = L2CAP_HostNumCompletedPkts &rArr; HCI_HostNumCompletedPktCmd &rArr; API_HostNumCompletedPktCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_HostNumCompletedPktCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_AppCompletedMsg
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[1bd]"></a>L2CAP_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, l2cap.o(i.L2CAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = L2CAP_Init &rArr; linkDB_Init &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralInit
</UL>

<P><STRONG><a name="[30c]"></a>L2CAP_ParseConnectReq</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, l2cap.o(i.L2CAP_ParseConnectReq))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
</UL>

<P><STRONG><a name="[30d]"></a>L2CAP_ParseFlowCtrlCredit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, l2cap.o(i.L2CAP_ParseFlowCtrlCredit))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
</UL>

<P><STRONG><a name="[30b]"></a>L2CAP_ParseParamUpdateReq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, l2cap_input.o(i.L2CAP_ParseParamUpdateReq))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
</UL>

<P><STRONG><a name="[50]"></a>L2CAP_ProcessEvent</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, l2cap.o(i.L2CAP_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = L2CAP_ProcessEvent &rArr; l2capProcessRxData &rArr; l2capProcessReq &rArr; l2capProcessConnectReq &rArr; l2capSendConnectRsp &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendPkt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role.o(i.GAPRole_PeripheralInit)
</UL>
<P><STRONG><a name="[1e5]"></a>L2CAP_RegisterApp</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, l2cap.o(i.L2CAP_RegisterApp))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
</UL>

<P><STRONG><a name="[25c]"></a>L2CAP_SendData</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, l2cap_output.o(i.L2CAP_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_MTU
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>

<P><STRONG><a name="[2da]"></a>L2CAP_SetBufSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, l2cap.o(i.L2CAP_SetBufSize))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessTMOSMsg
</UL>

<P><STRONG><a name="[21e]"></a>L2CAP_bm_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, l2cap.o(i.L2CAP_bm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = L2CAP_bm_alloc &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendSegment
</UL>

<P><STRONG><a name="[184]"></a>LLE_DevInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lle.o(i.LLE_DevInit))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_SystemProcess
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RegInit
</UL>

<P><STRONG><a name="[135]"></a>LL_AddDeviceToResolvingList</STRONG> (Thumb, 138 bytes, Stack size 80 bytes, ctl_input.o(i.LL_AddDeviceToResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_AddDeviceToResolvingList
</UL>

<P><STRONG><a name="[137]"></a>LL_AddWhiteListDevice</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ctl_input.o(i.LL_AddWhiteListDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_AddWhiteListDevice &rArr; LL_WhitelistAdd &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WhitelistAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_AddWhiteListCmd
</UL>

<P><STRONG><a name="[260]"></a>LL_AddrGenerateResolvableAddress</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, ll_address.o(i.LL_AddrGenerateResolvableAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand32
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistAdd
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_resolvinglist_renew_rpa
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_resolvinglist_timeout_renew_rpa
</UL>

<P><STRONG><a name="[263]"></a>LL_AddrInit</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, ll_address.o(i.LL_AddrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LL_AddrInit &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand32
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand16
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistInit
</UL>

<P><STRONG><a name="[265]"></a>LL_AdvertiseDirectTimeout</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_advertise.o(i.LL_AdvertiseDirectTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_AdvertiseDirectTimeout &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReportGenerateEvent
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvertiseToStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessEvent
</UL>

<P><STRONG><a name="[268]"></a>LL_AdvertiseEnalbe</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ll_advertise.o(i.LL_AdvertiseEnalbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_AdvertiseEnalbe &rArr; LL_Init &rArr; LL_ResolvinglistInit &rArr; LL_AddrInit &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessEventRegister
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlaveEnalbe
</UL>

<P><STRONG><a name="[266]"></a>LL_AdvertiseToStandby</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ll_advertise.o(i.LL_AdvertiseToStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_AdvertiseToStandby &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_shut
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvertiseDirectTimeout
</UL>

<P><STRONG><a name="[139]"></a>LL_ClearResolvingList</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ctl_input.o(i.LL_ClearResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_ClearResolvingList &rArr; LL_ResolvinglistClearall &rArr; tmos_stop_callback_task &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistClearall
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_ClearResolvingList
</UL>

<P><STRONG><a name="[13b]"></a>LL_ClearWhiteList</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ctl_input.o(i.LL_ClearWhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ClearWhiteList &rArr; LL_WhitelistClearAll &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WhitelistClearAll
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_ClearWhiteListCmd
</UL>

<P><STRONG><a name="[13d]"></a>LL_ConnUpdate</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, ctl_input.o(i.LL_ConnUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LL_ConnUpdate &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand16
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_get_prime_number
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_update_get_offset
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_ConnUpdateCmd
</UL>

<P><STRONG><a name="[338]"></a>LL_ConnectFlowcontrolRx</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ll_connect.o(i.LL_ConnectFlowcontrolRx))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[336]"></a>LL_ConnectFlowcontrolTx</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ll_connect.o(i.LL_ConnectFlowcontrolTx))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[270]"></a>LL_ConnectFreeTmosPrioritID</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ll_connect.o(i.LL_ConnectFreeTmosPrioritID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_ConnectFreeTmosPrioritID
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[33a]"></a>LL_ConnectRxPktnumIncrease</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ll_connect.o(i.LL_ConnectRxPktnumIncrease))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[272]"></a>LL_ConnectShut</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ll_connect.o(i.LL_ConnectShut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_ConnectShut &rArr; LL_CoreClose &rArr; LL_CoreDataListFree &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_callback_task
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreClose
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[275]"></a>LL_ConnectToStandby</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ll_connect.o(i.LL_ConnectToStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_ConnectToStandby &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessRegister
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_get_slave_number
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_get_master_number
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReportGenerateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MD_Disconnect
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_event
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_after_tx
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_supervision_timeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_procedure_timeout
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_action_in_connintervaltimeout
</UL>

<P><STRONG><a name="[337]"></a>LL_ConnectTxPktnumIncrease</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ll_connect.o(i.LL_ConnectTxPktnumIncrease))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[278]"></a>LL_ConnectionParamReq</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ll_pdu.o(i.LL_ConnectionParamReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ConnectionParamReq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[279]"></a>LL_ConnectionParamRsp</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ll_pdu.o(i.LL_ConnectionParamRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ConnectionParamRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[274]"></a>LL_CoreClose</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ll_core.o(i.LL_CoreClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_CoreClose &rArr; LL_CoreDataListFree &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreDataListFree
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectShut
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
</UL>

<P><STRONG><a name="[27a]"></a>LL_CoreDataListFree</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ll_core.o(i.LL_CoreDataListFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_CoreDataListFree &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreClose
</UL>

<P><STRONG><a name="[27b]"></a>LL_CoreDataListInit</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ll_core.o(i.LL_CoreDataListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_CoreDataListInit &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreOpen
</UL>

<P><STRONG><a name="[26d]"></a>LL_CoreGetCore</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ll_core.o(i.LL_CoreGetCore))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetDataLength
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataPkt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoteConnParamReqReply
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoteConnParamReqNegReply
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MD_Disconnect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LtkReqReply
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LtkReqNegReply
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveCreateCore
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[295]"></a>LL_CoreGetDataList</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ll_core.o(i.LL_CoreGetDataList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_CoreGetDataList
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataPkt
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_recv_data
</UL>

<P><STRONG><a name="[27c]"></a>LL_CoreInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_core.o(i.LL_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[27d]"></a>LL_CoreOpen</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ll_core.o(i.LL_CoreOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_CoreOpen &rArr; LL_CoreDataListInit &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreDataListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveCreateCore
</UL>

<P><STRONG><a name="[13f]"></a>LL_CreateConnCancel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ctl_input.o(i.LL_CreateConnCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_CreateConnCancel &rArr; LL_InitiateToStandby &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitiateToStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_CreateConnCancelCmd
</UL>

<P><STRONG><a name="[130]"></a>LL_Disconnect</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ctl_input.o(i.LL_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_Disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_DisconnectCmd
</UL>

<P><STRONG><a name="[27f]"></a>LL_EncRsp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ll_pdu.o(i.LL_EncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EncRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[262]"></a>LL_Encrypt</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, aes.o(i.LL_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_DevAESEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddrGenerateResolvableAddress
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_resolvinglist_checkRPA
</UL>

<P><STRONG><a name="[280]"></a>LL_FeatureRsp</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ll_pdu.o(i.LL_FeatureRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_FeatureRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[281]"></a>LL_GetNextConnectEventTime</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ll_connect.o(i.LL_GetNextConnectEventTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_GetNextConnectEventTime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_SystemProcess
</UL>

<P><STRONG><a name="[282]"></a>LL_HopGetChannel</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ll_hop.o(i.LL_HopGetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LL_HopGetChannel &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_event
</UL>

<P><STRONG><a name="[323]"></a>LL_HopInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_hop.o(i.LL_HopInit))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveCreateCore
</UL>

<P><STRONG><a name="[269]"></a>LL_Init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, ll.o(i.LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LL_Init &rArr; LL_ResolvinglistInit &rArr; LL_AddrInit &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IPCoreInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WhitelistInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistInit
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvertiseEnalbe
</UL>

<P><STRONG><a name="[27e]"></a>LL_InitiateToStandby</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ll_initiate.o(i.LL_InitiateToStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_InitiateToStandby &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_shut
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessRegister
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReportGenerateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CreateConnCancel
</UL>

<P><STRONG><a name="[147]"></a>LL_LE_ReadBufSize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ctl_input.o(i.LL_LE_ReadBufSize))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_ReadBufSizeCmd
</UL>

<P><STRONG><a name="[33f]"></a>LL_LengthReq</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ll_pdu.o(i.LL_LengthReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_LengthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[342]"></a>LL_LengthRsp</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ll_pdu.o(i.LL_LengthRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_LengthRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[141]"></a>LL_LtkReqNegReply</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ctl_input.o(i.LL_LtkReqNegReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LtkReqNegReply
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_LtkReqNegReplyCmd
</UL>

<P><STRONG><a name="[143]"></a>LL_LtkReqReply</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ctl_input.o(i.LL_LtkReqReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_LtkReqReply
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_LtkReqReplyCmd
</UL>

<P><STRONG><a name="[15f]"></a>LL_MD_Disconnect</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ctl_input.o(i.LL_MD_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_MD_Disconnect &rArr; LL_ConnectToStandby &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectToStandby
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MD_DisconnectCmd
</UL>

<P><STRONG><a name="[347]"></a>LL_PauseEncRsp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ll_pdu.o(i.LL_PauseEncRsp))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[33e]"></a>LL_PingReq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ll_pdu.o(i.LL_PingReq))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[341]"></a>LL_PingRsp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ll_pdu.o(i.LL_PingRsp))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[6a]"></a>LL_ProcessEvent</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, ll.o(i.LL_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = LL_ProcessEvent &rArr; LL_ProcessTMOSReportMsg &rArr; HCI_RemoteConnectionParameterRequestCback &rArr; HOST_RemoteConnectionParameterRequestEvent &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TransmitterTest
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReceiverTest
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvertiseDirectTimeout
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_advertise.o(i.LL_AdvertiseEnalbe)
</UL>
<P><STRONG><a name="[285]"></a>LL_ProcessTMOSReportMsg</STRONG> (Thumb, 1222 bytes, Stack size 72 bytes, ll_report.o(i.LL_ProcessTMOSReportMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = LL_ProcessTMOSReportMsg &rArr; HCI_RemoteConnectionParameterRequestCback &rArr; HOST_RemoteConnectionParameterRequestEvent &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RxDataCompleteCback
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectShut
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReportGenerateEvent
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RemoteConnectionParameterRequestCback
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadRemoteVersionInfoCback
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_NumberOfCompletedPacketsCback
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_RemoteConnectionParameterRequestCback
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadRemoteUsedFeaturesCompleteCback
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LongTermKeyRequestCback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_EnhancedConnectionCompleteCback
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_DataLengthChangeCback
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ConnectionUpdateCompleteCback
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ConnectionCompleteCback
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_EncryptionKeyRefreshCompleteCback
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_EncryptionChangeCback
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DisconnectionCompleteCback
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DataBufferOverflowCback
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_AuthenticatedPayloadTimeoutExpiredCback
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessEvent
</UL>

<P><STRONG><a name="[145]"></a>LL_Rand</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ctl_input.o(i.LL_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LL_Rand &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand8
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_RandCmd
</UL>

<P><STRONG><a name="[161]"></a>LL_ReadBDAddr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ctl_input.o(i.LL_ReadBDAddr))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ReadBDADDRCmd
</UL>

<P><STRONG><a name="[286]"></a>LL_ReceiverTest</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ctl_input.o(i.LL_ReceiverTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ReceiverTest &rArr; ble_ll_hw_api_rx_test
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_rx_test
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessEvent
</UL>

<P><STRONG><a name="[340]"></a>LL_RejectInd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ll_pdu.o(i.LL_RejectInd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[348]"></a>LL_RejectIndExt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ll_pdu.o(i.LL_RejectIndExt))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[149]"></a>LL_RemoteConnParamReqNegReply</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ctl_input.o(i.LL_RemoteConnParamReqNegReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RemoteConnParamReqNegReply
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_RemoteConnParamReqNegReplyCmd
</UL>

<P><STRONG><a name="[14b]"></a>LL_RemoteConnParamReqReply</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, ctl_input.o(i.LL_RemoteConnParamReqReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LL_RemoteConnParamReqReply &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand16
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_get_prime_number
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_update_get_offset
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_RemoteConnParamReqReplyCmd
</UL>

<P><STRONG><a name="[267]"></a>LL_ReportGenerateEvent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ll_report.o(i.LL_ReportGenerateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitiateToStandby
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_after_tx
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveSetFirstTimer
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_check_connect_point
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_change_connect_point
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectToStandby
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvertiseDirectTimeout
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[25e]"></a>LL_ResolvinglistAdd</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, ll_resolvinglist.o(i.LL_ResolvinglistAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_revmemcpy
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddrGenerateResolvableAddress
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_resolvinglist_renew_set
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddDeviceToResolvingList
</UL>

<P><STRONG><a name="[28d]"></a>LL_ResolvinglistCheckPeerResolution</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ll_resolvinglist.o(i.LL_ResolvinglistCheckPeerResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_ResolvinglistCheckPeerResolution &rArr; ll_resolvinglist_checkRPA &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_resolvinglist_checkRPA
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
</UL>

<P><STRONG><a name="[26b]"></a>LL_ResolvinglistClearall</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ll_resolvinglist.o(i.LL_ResolvinglistClearall))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_ResolvinglistClearall &rArr; tmos_stop_callback_task &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_callback_task
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ClearResolvingList
</UL>

<P><STRONG><a name="[284]"></a>LL_ResolvinglistInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_resolvinglist.o(i.LL_ResolvinglistInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_ResolvinglistInit &rArr; LL_AddrInit &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[28f]"></a>LL_ResolvinglistPeerIdentifyAddressGetIrk</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ll_resolvinglist.o(i.LL_ResolvinglistPeerIdentifyAddressGetIrk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_ResolvinglistPeerIdentifyAddressGetIrk &rArr; tmos_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseSet
</UL>

<P><STRONG><a name="[290]"></a>LL_ResolvinglistPeerRpaAddressGetIrk</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ll_resolvinglist.o(i.LL_ResolvinglistPeerRpaAddressGetIrk))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LL_ResolvinglistPeerRpaAddressGetIrk &rArr; ll_resolvinglist_checkRPA &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_resolvinglist_checkRPA
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseSet
</UL>

<P><STRONG><a name="[291]"></a>LL_RxConnParamReq</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ll_pdu.o(i.LL_RxConnParamReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RxConnParamReq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[292]"></a>LL_RxLenUpdate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ll_pdu.o(i.LL_RxLenUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_RxLenUpdate &rArr; ll_connect_calculate_effective_len
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_calculate_effective_len
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[33b]"></a>LL_RxVersionExchange</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ll_pdu.o(i.LL_RxVersionExchange))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[294]"></a>LL_ScanToStandby</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ll_scan.o(i.LL_ScanToStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_ScanToStandby &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_shut
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanEnable
</UL>

<P><STRONG><a name="[344]"></a>LL_SendAck</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ll_pdu.o(i.LL_SendAck))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[163]"></a>LL_SendDataPkt</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, ctl_input.o(i.LL_SendDataPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetDataList
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SendDataPkt
</UL>

<P><STRONG><a name="[345]"></a>LL_SendDmaBuf</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, ll_pdu.o(i.LL_SendDmaBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_SendDmaBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[14d]"></a>LL_SetAddressResolvableEnable</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ctl_input.o(i.LL_SetAddressResolvableEnable))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetAddressResolvableEnableCmd
</UL>

<P><STRONG><a name="[151]"></a>LL_SetAdvControl</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, ctl_input.o(i.LL_SetAdvControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LL_SetAdvControl &rArr; ble_ll_common_rand16 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand16
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_get_slave_number
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvertiseToStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetAdvEnableCmd
</UL>

<P><STRONG><a name="[14f]"></a>LL_SetAdvData</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ctl_input.o(i.LL_SetAdvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_SetAdvData
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetAdvDataCmd
</UL>

<P><STRONG><a name="[153]"></a>LL_SetAdvParam</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ctl_input.o(i.LL_SetAdvParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_SetAdvParam
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetAdvParamCmd
</UL>

<P><STRONG><a name="[296]"></a>LL_SetDataLength</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ctl_input.o(i.LL_SetDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_SetDataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[155]"></a>LL_SetRandomAddress</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ctl_input.o(i.LL_SetRandomAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SetRandomAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetRandomAddressCmd
</UL>

<P><STRONG><a name="[157]"></a>LL_SetResolvableAddressTimeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ctl_input.o(i.LL_SetResolvableAddressTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_SetResolvableAddressTimeout &rArr; tmos_update_callback_timer &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_update_callback_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetResolvableAddressTimeoutCmd
</UL>

<P><STRONG><a name="[159]"></a>LL_SetScanEnable</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ctl_input.o(i.LL_SetScanEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_SetScanEnable &rArr; LL_ScanToStandby &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanToStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetScanEnableCmd
</UL>

<P><STRONG><a name="[15b]"></a>LL_SetScanRspData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ctl_input.o(i.LL_SetScanRspData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_SetScanRspData
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_SetScanRspDataCmd
</UL>

<P><STRONG><a name="[1bc]"></a>LL_SlaveEnalbe</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_slave.o(i.LL_SlaveEnalbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LL_SlaveEnalbe &rArr; LL_AdvertiseEnalbe &rArr; LL_Init &rArr; LL_ResolvinglistInit &rArr; LL_AddrInit &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvertiseEnalbe
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralInit
</UL>

<P><STRONG><a name="[298]"></a>LL_SlaveFeatureReq</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ll_pdu.o(i.LL_SlaveFeatureReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SlaveFeatureReq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[349]"></a>LL_StartEncReq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ll_pdu.o(i.LL_StartEncReq))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[34a]"></a>LL_StartEncRsp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ll_pdu.o(i.LL_StartEncRsp))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[15d]"></a>LL_StartEncrypt</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, ctl_input.o(i.LL_StartEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_StartEncrypt &rArr; tmos_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_rand
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LE_StartEncryptCmd
</UL>

<P><STRONG><a name="[346]"></a>LL_TerminateInd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ll_pdu.o(i.LL_TerminateInd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[287]"></a>LL_TransmitterTest</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, ctl_input.o(i.LL_TransmitterTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LL_TransmitterTest &rArr; ble_ll_hw_api_tx_test &rArr; ble_ll_hw_api_shut
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_tx_test
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePRBS9
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePRBS15
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessEvent
</UL>

<P><STRONG><a name="[33c]"></a>LL_UnknowRsp</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ll_pdu.o(i.LL_UnknowRsp))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[33d]"></a>LL_VersionInd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ll_pdu.o(i.LL_VersionInd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[25f]"></a>LL_WhitelistAdd</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ll_whitelist.o(i.LL_WhitelistAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_WhitelistAdd &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddWhiteListDevice
</UL>

<P><STRONG><a name="[26c]"></a>LL_WhitelistClearAll</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ll_whitelist.o(i.LL_WhitelistClearAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_WhitelistClearAll &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ClearWhiteList
</UL>

<P><STRONG><a name="[283]"></a>LL_WhitelistInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_whitelist.o(i.LL_WhitelistInit))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[29d]"></a>LL_WhitelistLookup</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ll_whitelist.o(i.LL_WhitelistLookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_WhitelistLookup &rArr; tmos_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
</UL>

<P><STRONG><a name="[185]"></a>RFEND_DevInit</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, rfend.o(i.RFEND_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFEND_DevInit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RegInit
</UL>

<P><STRONG><a name="[17f]"></a>RFEND_RXAdc</STRONG> (Thumb, 238 bytes, Stack size 36 bytes, rfend.o(i.RFEND_RXAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RFEND_RXAdc
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ADCTune
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RegInit
</UL>

<P><STRONG><a name="[189]"></a>RFEND_RXFilter</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rfend.o(i.RFEND_RXFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFEND_RXFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RegInit
</UL>

<P><STRONG><a name="[187]"></a>RFEND_TXCtune</STRONG> (Thumb, 2942 bytes, Stack size 48 bytes, rfend.o(i.RFEND_TXCtune))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RFEND_TXCtune &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RegInit
</UL>

<P><STRONG><a name="[188]"></a>RFEND_TXFtune</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfend.o(i.RFEND_TXFtune))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RegInit
</UL>

<P><STRONG><a name="[4d]"></a>RTC_Get32KClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tmos_hw.o(i.RTC_Get32KClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Get32KClock
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tmos_hw.o(i.TMOS_TimerInit)
<LI> lle.o(i.BLE_IRQHandler)
</UL>
<P><STRONG><a name="[70]"></a>RTC_GetTickCount</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tmos_hw.o(i.RTC_GetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_GetTickCount &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tmos_hw.o(i.TMOS_TimerInit)
</UL>
<P><STRONG><a name="[375]"></a>ReadFlash</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tmos_hw.o(i.ReadFlash))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_write
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
</UL>

<P><STRONG><a name="[1d8]"></a>SM_CalcRandomAddr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sm.o(i.SM_CalcRandomAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SM_CalcRandomAddr &rArr; sm_ah &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[2a0]"></a>SM_GenerateAuthenSig</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, sm.o(i.SM_GenerateAuthenSig))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_revmemcpy
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIncSignCounter
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSignCounter
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSRK
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>

<P><STRONG><a name="[1c0]"></a>SM_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sm.o(i.SM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterApp
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralInit
</UL>

<P><STRONG><a name="[1de]"></a>SM_InitiatorInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sm.o(i.SM_InitiatorInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[2a5]"></a>SM_ParamInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sm.o(i.SM_ParamInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
</UL>

<P><STRONG><a name="[1eb]"></a>SM_PasskeyUpdate</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sm.o(i.SM_PasskeyUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SM_PasskeyUpdate &rArr; sm_c1 &rArr; sm_c1new &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate
</UL>

<P><STRONG><a name="[53]"></a>SM_ProcessEvent</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sm.o(i.SM_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = SM_ProcessEvent &rArr; smProcessTMOSMsg &rArr; smProcessDataMsg &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_NumConns
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smTimedOut
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessTMOSMsg
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smNextPairingState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role.o(i.GAPRole_PeripheralInit)
</UL>
<P><STRONG><a name="[1ef]"></a>SM_ResolveRandomAddrs</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sm.o(i.SM_ResolveRandomAddrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SM_ResolveRandomAddrs &rArr; sm_ah &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ResolvePrivateAddr
</UL>

<P><STRONG><a name="[1e0]"></a>SM_ResponderInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sm.o(i.SM_ResponderInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[15]"></a>SM_StartEncryption</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, sm.o(i.SM_StartEncryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SM_StartEncryption &rArr; HCI_LE_StartEncyptCmd &rArr; API_LE_StartEncryptCmd &rArr; HCI_CommandStatusCback &rArr; HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_StartEncyptCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm.o(i.SM_ParamInit)
<LI> sm.o(.data)
</UL>
<P><STRONG><a name="[1cb]"></a>SM_StartPairing</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, sm.o(i.SM_StartPairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = SM_StartPairing &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
</UL>

<P><STRONG><a name="[174]"></a>SM_VerifyAuthenSig</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, sm.o(i.SM_VerifyAuthenSig))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SM_VerifyAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_revmemcpy
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParsePacket
</UL>

<P><STRONG><a name="[6f]"></a>TMOS_CbTimerProcessEvent</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tmos.o(i.TMOS_CbTimerProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMOS_CbTimerProcessEvent &rArr; tmos_msg_receive &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tmos.o(i.TMOS_Init)
</UL>
<P><STRONG><a name="[182]"></a>TMOS_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tmos.o(i.TMOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMOS_Init &rArr; tmos_snv_init &rArr; tmos_snv_clear &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LibInit
</UL>

<P><STRONG><a name="[a5]"></a>TMOS_ProcessEventRegister</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tmos.o(i.TMOS_ProcessEventRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMOS_ProcessEventRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManage_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbHid_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_Init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvertiseEnalbe
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralEnable
</UL>

<P><STRONG><a name="[271]"></a>TMOS_ProcessRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmos.o(i.TMOS_ProcessRegister))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitiateToStandby
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_event
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveSetFirstTimer
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectToStandby
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectFreeTmosPrioritID
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanToStandby
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_tx
</UL>

<P><STRONG><a name="[c1]"></a>TMOS_SystemProcess</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, tmos.o(i.TMOS_SystemProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TMOS_SystemProcess &rArr; LL_GetNextConnectEventTime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_timeout_process
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetNextConnectEventTime
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_DevInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DevInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DevInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>TMOS_TimerInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tmos_hw.o(i.TMOS_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMOS_TimerInit &rArr; TMOS_TimerRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_TimerRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TimeInit
</UL>

<P><STRONG><a name="[2b2]"></a>TMOS_TimerRegister</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tmos.o(i.TMOS_TimerRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMOS_TimerRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_TimerInit
</UL>

<P><STRONG><a name="[376]"></a>WtireFlash</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, tmos_hw.o(i.WtireFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WtireFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_notify
</UL>

<P><STRONG><a name="[2b3]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3be]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[b0]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_ProcessEvent
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevParamUpdateCB
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerSerive
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbHid_ProcessEvent
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevTransProcess
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57X_BLEInit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_InitTasks
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidEmuStateCB
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ProcessEvent
</UL>

<P><STRONG><a name="[29e]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tmos_hw.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTickCount
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_change_connect_point
</UL>

<P><STRONG><a name="[ad]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hidkbd.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_GetParameter
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_GetParameter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_ModeCfg
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerSerive
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevTransProcess
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_ModeCfg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidEmuStateCB
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessGAPMsg
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetPayload
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[3bf]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3c0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3c1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[171]"></a>attSendMsg</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, att.o(i.attSendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetMTU
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueNoti
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueInd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendRspMsg
</UL>

<P><STRONG><a name="[167]"></a>attSendRspMsg</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, att.o(i.attSendRspMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_WriteRsp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadRsp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadMultiRsp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeRsp
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeRsp
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobRsp
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteRsp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoRsp
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueRsp
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteRsp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTURsp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
</UL>

<P><STRONG><a name="[326]"></a>ble_ll_chkcrc</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, ip.o(i.ble_ll_chkcrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_ll_chkcrc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
</UL>

<P><STRONG><a name="[264]"></a>ble_ll_common_rand16</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tmos_hw.o(i.ble_ll_common_rand16))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_ll_common_rand16 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_rand
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoteConnParamReqReply
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddrInit
</UL>

<P><STRONG><a name="[261]"></a>ble_ll_common_rand32</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tmos_hw.o(i.ble_ll_common_rand32))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_rand
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddrInit
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddrGenerateResolvableAddress
</UL>

<P><STRONG><a name="[289]"></a>ble_ll_common_rand8</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tmos_hw.o(i.ble_ll_common_rand8))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_rand
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rand
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_update_get_offset
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseStart
</UL>

<P><STRONG><a name="[335]"></a>ble_ll_hw_api_rx</STRONG> (Thumb, 220 bytes, Stack size 20 bytes, ip.o(i.ble_ll_hw_api_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_ll_hw_api_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[28a]"></a>ble_ll_hw_api_rx_test</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ip.o(i.ble_ll_hw_api_rx_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ll_hw_api_rx_test
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReceiverTest
</UL>

<P><STRONG><a name="[26a]"></a>ble_ll_hw_api_shut</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ip.o(i.ble_ll_hw_api_shut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ll_hw_api_shut
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_api_rx_set_txlen
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_tx_test
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_tx_set_len
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitiateToStandby
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_event
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanToStandby
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvertiseToStandby
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_tx
</UL>

<P><STRONG><a name="[2b7]"></a>ble_ll_hw_api_tx</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, ip.o(i.ble_ll_hw_api_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_ll_hw_api_tx &rArr; BLE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_tx
</UL>

<P><STRONG><a name="[2b8]"></a>ble_ll_hw_api_tx_set_len</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ip.o(i.ble_ll_hw_api_tx_set_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_hw_api_tx_set_len &rArr; ble_ll_hw_api_shut
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_shut
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
</UL>

<P><STRONG><a name="[29c]"></a>ble_ll_hw_api_tx_test</STRONG> (Thumb, 390 bytes, Stack size 20 bytes, ip.o(i.ble_ll_hw_api_tx_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_ll_hw_api_tx_test &rArr; ble_ll_hw_api_shut
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_shut
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TransmitterTest
</UL>

<P><STRONG><a name="[34b]"></a>ble_ll_set_connect_event</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmos_hw.o(i.ble_ll_set_connect_event))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_event
</UL>

<P><STRONG><a name="[2b1]"></a>ble_timeout_process</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tmos_hw.o(i.ble_timeout_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_timeout_process &rArr; BLE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_SystemProcess
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[2d5]"></a>gapAddAddrAdj</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gap.o(i.gapAddAddrAdj))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
</UL>

<P><STRONG><a name="[59]"></a>gapCancelLinkReq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gap_central.o(i.gapCancelLinkReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapCancelLinkReq &rArr; HCI_LE_CreateConnCancelCmd &rArr; API_LE_CreateConnCancelCmd &rArr; LL_CreateConnCancel &rArr; LL_InitiateToStandby &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CreateConnCancelCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_central.o(i.GAP_CentralParamInit)
</UL>
<P><STRONG><a name="[5a]"></a>gapCentProcessConnEvt</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, gap_central.o(i.gapCentProcessConnEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = gapCentProcessConnEvt &rArr; HCI_LE_ConnUpdateCmd &rArr; API_LE_ConnUpdateCmd &rArr; LL_ConnUpdate &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ValidConnTimeParams
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ConnUpdateCmd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendEstLinkEvent
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_central.o(i.GAP_CentralParamInit)
</UL>
<P><STRONG><a name="[56]"></a>gapCentProcessHCICmdEvt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gap_central.o(i.gapCentProcessHCICmdEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapCentProcessHCICmdEvt &rArr; gapSetScanParamStatus &rArr; gapSendScanEnable &rArr; HCI_LE_SetScanEnableCmd &rArr; API_LE_SetScanEnableCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_central.o(i.GAP_CentralParamInit)
</UL>
<P><STRONG><a name="[2cf]"></a>gapDetermineAddrType</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gap.o(i.gapDetermineAddrType))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessEnhancedConnectionCompleteEvt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
</UL>

<P><STRONG><a name="[2c4]"></a>gapFindADType</STRONG> (Thumb, 70 bytes, Stack size 36 bytes, gap.o(i.gapFindADType))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapValidADType
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
</UL>

<P><STRONG><a name="[1cd]"></a>gapFreeAuthLink</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gap.o(i.gapFreeAuthLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapFreeAuthLink &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
</UL>

<P><STRONG><a name="[2c0]"></a>gapFreeEstLink</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap.o(i.gapFreeEstLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapFreeEstLink &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessEnhancedConnectionCompleteEvt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentProcessConnEvt
</UL>

<P><STRONG><a name="[1d5]"></a>gapFreeScanRecs</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, gap_central.o(i.gapFreeScanRecs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapFreeScanRecs &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
</UL>

<P><STRONG><a name="[358]"></a>gapGetDevAddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gap.o(i.gapGetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[357]"></a>gapGetDevAddressMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap.o(i.gapGetDevAddressMode))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[1e8]"></a>gapGetIRK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap.o(i.gapGetIRK))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[2a2]"></a>gapGetSRK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap.o(i.gapGetSRK))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[2a1]"></a>gapGetSignCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap.o(i.gapGetSignCounter))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[2a4]"></a>gapIncSignCounter</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gap.o(i.gapIncSignCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapIncSignCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[2c6]"></a>gapL2capConnParamUpdateReq</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gap.o(i.gapL2capConnParamUpdateReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = gapL2capConnParamUpdateReq &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessConnEvt
</UL>

<P><STRONG><a name="[2c7]"></a>gapPairingCompleteCB</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, gap.o(i.gapPairingCompleteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapPairingCompleteCB &rArr; sendAuthEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memdup
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>

<P><STRONG><a name="[2c9]"></a>gapPasskeyNeededCB</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, gap.o(i.gapPasskeyNeededCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapPasskeyNeededCB &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
</UL>

<P><STRONG><a name="[2cc]"></a>gapProcessConnEvt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gap.o(i.gapProcessConnEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapProcessConnEvt &rArr; linkDB_Role &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Role
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessTMOSMsg
</UL>

<P><STRONG><a name="[2d2]"></a>gapProcessDisconnectCompleteEvt</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gap.o(i.gapProcessDisconnectCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapProcessDisconnectCompleteEvt &rArr; disconnectNext &rArr; HCI_DisconnectCmd &rArr; API_DisconnectCmd &rArr; HCI_CommandStatusCback &rArr; HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Role
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessTMOSMsg
</UL>

<P><STRONG><a name="[1d9]"></a>gapProcessNewAddr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gap.o(i.gapProcessNewAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapProcessNewAddr &rArr; HCI_LE_SetRandomAddressCmd &rArr; API_LE_SetRandomAddressCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetRandomAddressCmd
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAddAddrAdj
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[2d6]"></a>gapProcessRandomAddrComplete</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gap.o(i.gapProcessRandomAddrComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapProcessRandomAddrComplete &rArr; tmos_start_reload_task &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_reload_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessTMOSMsg
</UL>

<P><STRONG><a name="[58]"></a>gapProcessScanningDirectEvt</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gap_central.o(i.gapProcessScanningDirectEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapProcessScanningDirectEvt &rArr; gapSendScanEnable &rArr; HCI_LE_SetScanEnableCmd &rArr; API_LE_SetScanEnableCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_central.o(i.GAP_CentralParamInit)
</UL>
<P><STRONG><a name="[57]"></a>gapProcessScanningEvt</STRONG> (Thumb, 644 bytes, Stack size 40 bytes, gap_central.o(i.gapProcessScanningEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapProcessScanningEvt &rArr; gapSendScanEnable &rArr; HCI_LE_SetScanEnableCmd &rArr; API_LE_SetScanEnableCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindADType
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapDetermineAddrType
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_central.o(i.GAP_CentralParamInit)
</UL>
<P><STRONG><a name="[1d6]"></a>gapRegisterCentral</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap.o(i.gapRegisterCentral))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
</UL>

<P><STRONG><a name="[1d3]"></a>gapRegisterCentralConn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap.o(i.gapRegisterCentralConn))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentConnRegister
</UL>

<P><STRONG><a name="[1ed]"></a>gapRegisterPeripheral</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap.o(i.gapRegisterPeripheral))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
</UL>

<P><STRONG><a name="[1ec]"></a>gapRegisterPeripheralConn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap.o(i.gapRegisterPeripheralConn))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriConnRegister
</UL>

<P><STRONG><a name="[2de]"></a>gapSendBondCompleteEvent</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gap.o(i.gapSendBondCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapSendBondCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessEncryptChange
</UL>

<P><STRONG><a name="[2d8]"></a>gapSendDevDiscEvent</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, gap_central.o(i.gapSendDevDiscEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapSendDevDiscEvent &rArr; gapFreeScanRecs &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeScanRecs
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningDirectEvt
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
</UL>

<P><STRONG><a name="[2db]"></a>gapSendDeviceInitDoneEvent</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gap.o(i.gapSendDeviceInitDoneEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapSendDeviceInitDoneEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessTMOSMsg
</UL>

<P><STRONG><a name="[2bf]"></a>gapSendEstLinkEvent</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, gap.o(i.gapSendEstLinkEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapSendEstLinkEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessEnhancedConnectionCompleteEvt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentProcessConnEvt
</UL>

<P><STRONG><a name="[2c1]"></a>gapSendLinkUpdateEvent</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, gap.o(i.gapSendLinkUpdateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapSendLinkUpdateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessConnEvt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentProcessConnEvt
</UL>

<P><STRONG><a name="[2ca]"></a>gapSendMakeDiscEvent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gap_peripheral.o(i.gapSendMakeDiscEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapSendMakeDiscEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[2df]"></a>gapSendPairingReqEvent</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, gap.o(i.gapSendPairingReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapSendPairingReqEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[2e0]"></a>gapSendSlaveSecurityReqEvent</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, gap.o(i.gapSendSlaveSecurityReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapSendSlaveSecurityReqEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[2ad]"></a>gapUpdateConnSignCounter</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gap.o(i.gapUpdateConnSignCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapUpdateConnSignCounter &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
</UL>

<P><STRONG><a name="[2c5]"></a>gapValidADType</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gap.o(i.gapValidADType))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindADType
</UL>

<P><STRONG><a name="[2e1]"></a>gattFindServerInfo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gattservapp.o(i.gattFindServerInfo))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerNotifyTxCB
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetServerStatus
</UL>

<P><STRONG><a name="[218]"></a>gattFindService</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gattservapp.o(i.gattFindService))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceNumAttrs
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceEncKeySize
</UL>

<P><STRONG><a name="[21f]"></a>gattGetPayload</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, gatt.o(i.gattGetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gattGetPayload &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_free
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
</UL>

<P><STRONG><a name="[217]"></a>gattNotifyEvent</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gatt.o(i.gattNotifyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gattNotifyEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleTimerCB
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattSendFlowCtrlEvt
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_UpdateMTU
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_NotifyEvent
</UL>

<P><STRONG><a name="[213]"></a>gattRegisterServer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt.o(i.gattRegisterServer))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
</UL>

<P><STRONG><a name="[2e2]"></a>gattResetServerInfo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gattservapp.o(i.gattResetServerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gattResetServerInfo &rArr; gattStopTimer &rArr; tmos_stop_callback_task &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
</UL>

<P><STRONG><a name="[2e4]"></a>gattSendFlowCtrlEvt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gatt.o(i.gattSendFlowCtrlEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattSendFlowCtrlEvt &rArr; gattNotifyEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
</UL>

<P><STRONG><a name="[2e5]"></a>gattServApp_ClearPrepareWriteQ</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_ClearPrepareWriteQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattServApp_ClearPrepareWriteQ &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
</UL>

<P><STRONG><a name="[1ff]"></a>gattServApp_FindAuthorizeAttrCB</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gattservapp.o(i.gattServApp_FindAuthorizeAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gattServApp_FindAuthorizeAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>

<P><STRONG><a name="[2e6]"></a>gattServApp_FindPrepareWriteQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindPrepareWriteQ))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
</UL>

<P><STRONG><a name="[200]"></a>gattServApp_FindServiceCBs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindServiceCBs))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>

<P><STRONG><a name="[60]"></a>gattServApp_HandleConnStatusCB</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_HandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gattServApp_HandleConnStatusCB &rArr; GATT_FindNextAttr &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ClearPrepareWriteQ
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(i.GATTServApp_Init)
</UL>
<P><STRONG><a name="[2e7]"></a>gattServApp_IsWriteLong</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_IsWriteLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattServApp_IsWriteLong &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
</UL>

<P><STRONG><a name="[2e8]"></a>gattServApp_ProcessExecuteWriteReq</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessExecuteWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gattServApp_ProcessExecuteWriteReq &rArr; ATT_ExecuteWriteRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_IsWriteLong
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ClearPrepareWriteQ
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[2e9]"></a>gattServApp_ProcessFindByTypeValueReq</STRONG> (Thumb, 302 bytes, Stack size 64 bytes, gattservapp.o(i.gattServApp_ProcessFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = gattServApp_ProcessFindByTypeValueReq &rArr; ATT_FindByTypeValueRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetMTU
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[2ee]"></a>gattServApp_ProcessPrepareWriteReq</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessPrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = gattServApp_ProcessPrepareWriteReq &rArr; ATT_PrepareWriteRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[2ec]"></a>gattServApp_ProcessReadByGrpTypeReq</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, gattservapp.o(i.gattServApp_ProcessReadByGrpTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = gattServApp_ProcessReadByGrpTypeReq &rArr; ATT_ReadByGrpTypeRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeRsp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetMTU
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[2ea]"></a>gattServApp_ProcessReadByTypeReq</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, gattservapp.o(i.gattServApp_ProcessReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = gattServApp_ProcessReadByTypeReq &rArr; ATT_ReadByTypeRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeRsp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetMTU
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[2eb]"></a>gattServApp_ProcessReadMultiReq</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, gattservapp.o(i.gattServApp_ProcessReadMultiReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = gattServApp_ProcessReadMultiReq &rArr; ATT_ReadMultiRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadMultiRsp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetMTU
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[2ed]"></a>gattServApp_ProcessWriteReq</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, gattservapp.o(i.gattServApp_ProcessWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = gattServApp_ProcessWriteReq &rArr; ATT_WriteRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_WriteRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[10]"></a>gattServApp_WriteAttrCB</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, gattservapp.o(i.gattServApp_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gattServApp_WriteAttrCB &rArr; GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_WriteCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gattservapp.o(i.GATTServApp_ParamInit)
<LI> gattservapp.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>gattServerHandleConnStatusCB</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gattservapp.o(i.gattServerHandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattServerHandleConnStatusCB &rArr; gattNotifyEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetServerInfo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(i.GATT_InitServer)
</UL>
<P><STRONG><a name="[62]"></a>gattServerProcessMsgCB</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, gattservapp.o(i.gattServerProcessMsgCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = gattServerProcessMsgCB &rArr; ATT_ErrorRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetServerInfo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattSendFlowCtrlEvt
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetPayload
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_NotifyEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(i.GATT_InitServer)
</UL>
<P><STRONG><a name="[210]"></a>gattStartTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gatt.o(i.gattStartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattStartTimer &rArr; tmos_start_callback_task &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_callback_task
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[2e3]"></a>gattStopTimer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gatt.o(i.gattStopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattStopTimer &rArr; tmos_stop_callback_task &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_callback_task
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetServerInfo
</UL>

<P><STRONG><a name="[2f0]"></a>generate_subkey</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, sm.o(i.generate_subkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_128
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftshift_onebit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
</UL>

<P><STRONG><a name="[2f3]"></a>l2capAllocConnChannel</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, l2cap.o(i.l2capAllocConnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = l2capAllocConnChannel &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessConnectReq
</UL>

<P><STRONG><a name="[65]"></a>l2capBuildCmdReject</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, l2cap_sdu.o(i.l2capBuildCmdReject))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_sdu.o(i.L2CAP_CmdReject)
</UL>
<P><STRONG><a name="[72]"></a>l2capBuildDisconnectRsp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, l2cap_sdu.o(i.l2capBuildDisconnectRsp))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_input.o(i.l2capProcessReq)
</UL>
<P><STRONG><a name="[2f4]"></a>l2capDisconnectAllChannels</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, l2cap.o(i.l2capDisconnectAllChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = l2capDisconnectAllChannels &rArr; L2CAP_DisconnectReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyEvent
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyChannelTermEvt
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStopTimer
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreePendingPkt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capHandleRxError
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capHandleConnStatusCB
</UL>

<P><STRONG><a name="[2fa]"></a>l2capDisconnectChannel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, l2cap.o(i.l2capDisconnectChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = l2capDisconnectChannel &rArr; L2CAP_DisconnectReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyChannelTermEvt
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capReassembleSegment
</UL>

<P><STRONG><a name="[25d]"></a>l2capEncapSendData</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, l2cap_output.o(i.l2capEncapSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SendDataPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendSegment
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendFCPkt
</UL>

<P><STRONG><a name="[303]"></a>l2capFindLocalCID</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, l2cap.o(i.l2capFindLocalCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = l2capFindLocalCID
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capReassembleSegment
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket
</UL>

<P><STRONG><a name="[310]"></a>l2capFindLocalId</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, l2cap.o(i.l2capFindLocalId))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = l2capFindLocalId
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[305]"></a>l2capFindPsm</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, l2cap.o(i.l2capFindPsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = l2capFindPsm
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessConnectReq
</UL>

<P><STRONG><a name="[30e]"></a>l2capFindRemoteCID</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, l2cap.o(i.l2capFindRemoteCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2capFindRemoteCID
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
</UL>

<P><STRONG><a name="[2f6]"></a>l2capFreeChannel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, l2cap.o(i.l2capFreeChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l2capFreeChannel &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendConnectRsp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capHandleTimerCB
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capDisconnectChannel
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capDisconnectAllChannels
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
</UL>

<P><STRONG><a name="[2f9]"></a>l2capFreePendingPkt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, l2cap.o(i.l2capFreePendingPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2capFreePendingPkt &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyEvent
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capDisconnectAllChannels
</UL>

<P><STRONG><a name="[2fb]"></a>l2capFreeTxSDU</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, l2cap_output.o(i.l2capFreeTxSDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = l2capFreeTxSDU &rArr; l2capNotifySignal &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendSegment
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendNextSegment
</UL>

<P><STRONG><a name="[2fd]"></a>l2capGetCoChannelInfo</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, l2cap.o(i.l2capGetCoChannelInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2capGetCoChannelInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyChannelEstEvt
</UL>

<P><STRONG><a name="[69]"></a>l2capHandleConnStatusCB</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, l2cap.o(i.l2capHandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = l2capHandleConnStatusCB &rArr; l2capDisconnectAllChannels &rArr; L2CAP_DisconnectReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capDisconnectAllChannels
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cap.o(i.L2CAP_Init)
</UL>
<P><STRONG><a name="[2fe]"></a>l2capHandleRxError</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, l2cap.o(i.l2capHandleRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = l2capHandleRxError &rArr; l2capDisconnectAllChannels &rArr; L2CAP_DisconnectReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capDisconnectAllChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[74]"></a>l2capHandleTimerCB</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, l2cap.o(i.l2capHandleTimerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = l2capHandleTimerCB &rArr; l2capNotifyEvent &rArr; l2capNotifyChannelEstEvt &rArr; l2capNotifySignal &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyEvent
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cap.o(i.l2capStartTimer)
</UL>
<P><STRONG><a name="[2ff]"></a>l2capNotifyChannelEstEvt</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, l2cap_output.o(i.l2capNotifyChannelEstEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = l2capNotifyChannelEstEvt &rArr; l2capNotifySignal &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capGetCoChannelInfo
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendConnectRsp
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyEvent
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[2f5]"></a>l2capNotifyChannelTermEvt</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, l2cap_output.o(i.l2capNotifyChannelTermEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l2capNotifyChannelTermEvt &rArr; l2capNotifySignal &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyEvent
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capDisconnectChannel
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capDisconnectAllChannels
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
</UL>

<P><STRONG><a name="[300]"></a>l2capNotifyCreditEvt</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, l2cap_output.o(i.l2capNotifyCreditEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = l2capNotifyCreditEvt &rArr; l2capNotifySignal &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendNextSegment
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capReassembleSegment
</UL>

<P><STRONG><a name="[301]"></a>l2capNotifyData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, l2cap_output.o(i.l2capNotifyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = l2capNotifyData &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capReassembleSegment
</UL>

<P><STRONG><a name="[2f8]"></a>l2capNotifyEvent</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, l2cap_output.o(i.l2capNotifyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = l2capNotifyEvent &rArr; l2capNotifyChannelEstEvt &rArr; l2capNotifySignal &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyChannelEstEvt
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyChannelTermEvt
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreePendingPkt
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capHandleTimerCB
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capDisconnectAllChannels
</UL>

<P><STRONG><a name="[2fc]"></a>l2capNotifySignal</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, l2cap_output.o(i.l2capNotifySignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = l2capNotifySignal &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyChannelEstEvt
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyEvent
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyChannelTermEvt
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyCreditEvt
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeTxSDU
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
</UL>

<P><STRONG><a name="[306]"></a>l2capNumActiveChannnels</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, l2cap.o(i.l2capNumActiveChannnels))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = l2capNumActiveChannnels
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessConnectReq
</UL>

<P><STRONG><a name="[311]"></a>l2capParseCmdReject</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, l2cap_input.o(i.l2capParseCmdReject))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[314]"></a>l2capParseConnectRsp</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, l2cap_input.o(i.l2capParseConnectRsp))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[30a]"></a>l2capParseDisconnectReq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, l2cap_input.o(i.l2capParseDisconnectReq))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
</UL>

<P><STRONG><a name="[312]"></a>l2capParseDisconnectRsp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, l2cap_input.o(i.l2capParseDisconnectRsp))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[302]"></a>l2capParsePacket</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, l2cap_input.o(i.l2capParsePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = l2capParsePacket &rArr; tmos_bm_adjust_header
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFindLocalCID
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[313]"></a>l2capParseParamUpdateRsp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, l2cap_input.o(i.l2capParseParamUpdateRsp))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[316]"></a>l2capParseSignalHdr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, l2cap_input.o(i.l2capParseSignalHdr))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[304]"></a>l2capProcessConnectReq</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, l2cap_input.o(i.l2capProcessConnectReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = l2capProcessConnectReq &rArr; l2capSendConnectRsp &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendConnectRsp
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStartTimer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNumActiveChannnels
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFindPsm
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capAllocConnChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
</UL>

<P><STRONG><a name="[309]"></a>l2capProcessReq</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, l2cap_input.o(i.l2capProcessReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = l2capProcessReq &rArr; l2capProcessConnectReq &rArr; l2capSendConnectRsp &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyChannelTermEvt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFindRemoteCID
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFindLocalCID
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ParseFlowCtrlCredit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ParseConnectReq
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessConnectReq
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseDisconnectReq
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ParseParamUpdateReq
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[30f]"></a>l2capProcessRsp</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, l2cap_input.o(i.l2capProcessRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = l2capProcessRsp &rArr; L2CAP_DisconnectReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyChannelEstEvt
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyChannelTermEvt
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStopTimer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFindLocalId
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseParamUpdateRsp
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseDisconnectRsp
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseConnectRsp
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseCmdReject
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[25a]"></a>l2capProcessRxData</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, l2cap_input.o(i.l2capProcessRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = l2capProcessRxData &rArr; l2capProcessReq &rArr; l2capProcessConnectReq &rArr; l2capSendConnectRsp &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capHandleRxError
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capReassembleSegment
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseSignalHdr
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent
</UL>

<P><STRONG><a name="[315]"></a>l2capReassembleSegment</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, l2cap_output.o(i.l2capReassembleSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = l2capReassembleSegment &rArr; l2capDisconnectChannel &rArr; L2CAP_DisconnectReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_bm_adjust_header
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFindLocalCID
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capDisconnectChannel
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyCreditEvt
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[255]"></a>l2capSendCmd</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, l2cap_output.o(i.l2capSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStoreFCPkt
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendConnectRsp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateRsp
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
</UL>

<P><STRONG><a name="[308]"></a>l2capSendConnectRsp</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, l2cap_sdu.o(i.l2capSendConnectRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = l2capSendConnectRsp &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyChannelEstEvt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessConnectReq
</UL>

<P><STRONG><a name="[318]"></a>l2capSendFCPkt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, l2cap_output.o(i.l2capSendFCPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = l2capSendFCPkt &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendPkt
</UL>

<P><STRONG><a name="[319]"></a>l2capSendNextSegment</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, l2cap_output.o(i.l2capSendNextSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = l2capSendNextSegment &rArr; l2capSendSegment &rArr; l2capFreeTxSDU &rArr; l2capNotifySignal &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendSegment
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyCreditEvt
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeTxSDU
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendPkt
</UL>

<P><STRONG><a name="[25b]"></a>l2capSendPkt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, l2cap_output.o(i.l2capSendPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = l2capSendPkt &rArr; l2capSendNextSegment &rArr; l2capSendSegment &rArr; l2capFreeTxSDU &rArr; l2capNotifySignal &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendNextSegment
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendFCPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent
</UL>

<P><STRONG><a name="[256]"></a>l2capSendReq</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, l2cap_output.o(i.l2capSendReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStartTimer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFindLocalCID
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capAllocConnChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateReq
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
</UL>

<P><STRONG><a name="[31a]"></a>l2capSendSegment</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, l2cap_output.o(i.l2capSendSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = l2capSendSegment &rArr; l2capFreeTxSDU &rArr; l2capNotifySignal &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeTxSDU
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendNextSegment
</UL>

<P><STRONG><a name="[307]"></a>l2capStartTimer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, l2cap.o(i.l2capStartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = l2capStartTimer &rArr; tmos_start_callback_task &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_callback_task
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessConnectReq
</UL>

<P><STRONG><a name="[2f7]"></a>l2capStopTimer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, l2cap.o(i.l2capStopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2capStopTimer &rArr; tmos_stop_callback_task &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_callback_task
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capDisconnectAllChannels
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[317]"></a>l2capStoreFCPkt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, l2cap_output.o(i.l2capStoreFCPkt))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
</UL>

<P><STRONG><a name="[2f1]"></a>leftshift_onebit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sm.o(i.leftshift_onebit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = leftshift_onebit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[2d0]"></a>linkDB_Add</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, linkdb.o(i.linkDB_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = linkDB_Add &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_GetSMEvtID
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportStatusChange
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessEnhancedConnectionCompleteEvt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[20f]"></a>linkDB_Authen</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, linkdb.o(i.linkDB_Authen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = linkDB_Authen &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyWritePermissions
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyPrepareWritePermissions
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[1ac]"></a>linkDB_Find</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, linkdb.o(i.linkDB_Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateLink
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralConnParamUpdateReq
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_UpdateCharCfg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SlaveReqSecurity
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ServiceChangeInd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondPasscodeCB
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondPairStateCB
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_UpdateMTU
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_MTU
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattSendFlowCtrlEvt
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_UpdateMTU
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_NotifyEvent
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessConnEvt
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Role
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateAuth
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralProcessEvent
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessEncryptChange
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smLinkCheck
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_RemoteConnectionParameterRequestEvent
</UL>

<P><STRONG><a name="[2b9]"></a>linkDB_FindFirst</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, linkdb.o(i.linkDB_FindFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = linkDB_FindFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
</UL>

<P><STRONG><a name="[36b]"></a>linkDB_GetHandleFromSMEvtID</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, linkdb.o(i.linkDB_GetHandleFromSMEvtID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = linkDB_GetHandleFromSMEvtID
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smTimedOut
</UL>

<P><STRONG><a name="[35a]"></a>linkDB_GetPairingParam</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, linkdb.o(i.linkDB_GetPairingParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = linkDB_GetPairingParam
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smNextPairingState
</UL>

<P><STRONG><a name="[31b]"></a>linkDB_GetSMEvtID</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, linkdb.o(i.linkDB_GetSMEvtID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = linkDB_GetSMEvtID
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
</UL>

<P><STRONG><a name="[259]"></a>linkDB_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, linkdb.o(i.linkDB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = linkDB_Init &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init
</UL>

<P><STRONG><a name="[16f]"></a>linkDB_MTU</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, linkdb.o(i.linkDB_MTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = linkDB_MTU &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetMTU
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
</UL>

<P><STRONG><a name="[34e]"></a>linkDB_NeedSendKey</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, linkdb.o(i.linkDB_NeedSendKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = linkDB_NeedSendKey
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>

<P><STRONG><a name="[1e9]"></a>linkDB_NumActive</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, linkdb.o(i.linkDB_NumActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = linkDB_NumActive
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
</UL>

<P><STRONG><a name="[1e6]"></a>linkDB_NumConns</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, linkdb.o(i.linkDB_NumConns))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent
</UL>

<P><STRONG><a name="[ee]"></a>linkDB_PerformFunc</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, linkdb.o(i.linkDB_PerformFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = linkDB_PerformFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_MeasLevel
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_SetParameter
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ServiceChangeInd
</UL>

<P><STRONG><a name="[1c4]"></a>linkDB_PeripheralLinkNum</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, linkdb.o(i.linkDB_PeripheralLinkNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = linkDB_PeripheralLinkNum
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralProcessEvent
</UL>

<P><STRONG><a name="[1fa]"></a>linkDB_Register</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, linkdb.o(i.linkDB_Register))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init
</UL>

<P><STRONG><a name="[2d3]"></a>linkDB_Remove</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, linkdb.o(i.linkDB_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = linkDB_Remove &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportStatusChange
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
</UL>

<P><STRONG><a name="[2cd]"></a>linkDB_Role</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, linkdb.o(i.linkDB_Role))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = linkDB_Role &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnEvt
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessTMOSMsg
</UL>

<P><STRONG><a name="[f5]"></a>linkDB_State</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, linkdb.o(i.linkDB_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = linkDB_State &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanParam_HandleConnStatusCB
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_HandleConnStatusCB
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capHandleConnStatusCB
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capAllocConnChannel
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>

<P><STRONG><a name="[17c]"></a>linkDB_UpdateMTU</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, linkdb.o(i.linkDB_UpdateMTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = linkDB_UpdateMTU &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMTU
</UL>

<P><STRONG><a name="[77]"></a>llAdvTraverseallChannel</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ll_advertise.o(i.llAdvTraverseallChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llAdvTraverseallChannel &rArr; ll_advertise_tx &rArr; ble_ll_hw_api_tx &rArr; BLE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_advertise.o(i.llAdvertiseCreateCore)
</UL>
<P><STRONG><a name="[75]"></a>llAdvertiseSet</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, ll_advertise.o(i.llAdvertiseSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = llAdvertiseSet &rArr; ll_resolvinglist_renew_rpa &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_resolvinglist_renew_rpa
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistPeerRpaAddressGetIrk
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistPeerIdentifyAddressGetIrk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_advertise.o(i.llAdvertiseCreateCore)
</UL>
<P><STRONG><a name="[76]"></a>llAdvertiseStart</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ll_advertise.o(i.llAdvertiseStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = llAdvertiseStart &rArr; ll_hw_temp_sample &rArr; BLE_RegInit &rArr; RFEND_TXCtune &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_temp_sample
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand8
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_tx
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_advertise.o(i.llAdvertiseCreateCore)
</UL>
<P><STRONG><a name="[79]"></a>ll_advertise_process</STRONG> (Thumb, 982 bytes, Stack size 40 bytes, ll_advertise.o(i.ll_advertise_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ll_advertise_process &rArr; LL_ResolvinglistCheckPeerResolution &rArr; ll_resolvinglist_checkRPA &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_tx_set_len
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_shut
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_chkcrc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessRegister
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WhitelistLookup
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistPeerRpaAddressGetIrk
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistCheckPeerResolution
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreClose
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvertiseToStandby
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_advertise.o(i.ll_advertise_tx)
</UL>
<P><STRONG><a name="[327]"></a>ll_connect_action_in_connintervaltimeout</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, ll_connect.o(i.ll_connect_action_in_connintervaltimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ll_connect_action_in_connintervaltimeout &rArr; tmos_update_callback_timer &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_update_callback_timer
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_get_update_point
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectToStandby
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_event
</UL>

<P><STRONG><a name="[7a]"></a>ll_connect_auth_timeout</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ll_connect.o(i.ll_connect_auth_timeout))
<BR>[Address Reference Count : 1]<UL><LI> ll_connect.o(i.ll_connect_set_auth_timeout)
</UL>
<P><STRONG><a name="[293]"></a>ll_connect_calculate_effective_len</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ll_connect.o(i.ll_connect_calculate_effective_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_connect_calculate_effective_len
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_timer_window_widening
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxLenUpdate
</UL>

<P><STRONG><a name="[32a]"></a>ll_connect_change_connect_point</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, ll_connect.o(i.ll_connect_change_connect_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ll_connect_change_connect_point &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReportGenerateEvent
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_event
</UL>

<P><STRONG><a name="[333]"></a>ll_connect_event_continue</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ll_connect.o(i.ll_connect_event_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_connect_event_continue
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[322]"></a>ll_connect_flowcontrol_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ll_connect.o(i.ll_connect_flowcontrol_init))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveCreateCore
</UL>

<P><STRONG><a name="[276]"></a>ll_connect_get_master_number</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ll_connect.o(i.ll_connect_get_master_number))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectToStandby
</UL>

<P><STRONG><a name="[277]"></a>ll_connect_get_slave_number</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ll_connect.o(i.ll_connect_get_slave_number))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectToStandby
</UL>

<P><STRONG><a name="[328]"></a>ll_connect_get_update_point</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, ll_connect.o(i.ll_connect_get_update_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ll_connect_get_update_point
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_action_in_connintervaltimeout
</UL>

<P><STRONG><a name="[321]"></a>ll_connect_init_dataLen</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, ll_connect.o(i.ll_connect_init_dataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ll_connect_init_dataLen
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveCreateCore
</UL>

<P><STRONG><a name="[324]"></a>ll_connect_init_pingOffset</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ll_connect.o(i.ll_connect_init_pingOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ll_connect_init_pingOffset &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_after_tx
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveSetFirstTimer
</UL>

<P><STRONG><a name="[339]"></a>ll_connect_parse_datapdu_head</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ll_connect.o(i.ll_connect_parse_datapdu_head))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[7c]"></a>ll_connect_procedure_timeout</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ll_connect.o(i.ll_connect_procedure_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ll_connect_procedure_timeout &rArr; LL_ConnectToStandby &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectToStandby
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_connect.o(i.ll_connect_set_procedure_timeout)
</UL>
<P><STRONG><a name="[32b]"></a>ll_connect_recv_data</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, ll_connect.o(i.ll_connect_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ll_connect_recv_data &rArr; LL_CoreGetDataList
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetDataList
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[343]"></a>ll_connect_send_data</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, ll_connect.o(i.ll_connect_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ll_connect_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[32c]"></a>ll_connect_set_auth_timeout</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ll_connect.o(i.ll_connect_set_auth_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ll_connect_set_auth_timeout &rArr; tmos_start_callback_task &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_callback_task
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_callback_task
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_after_tx
</UL>

<P><STRONG><a name="[325]"></a>ll_connect_set_connect_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ll_connect.o(i.ll_connect_set_connect_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ll_connect_set_connect_timeout &rArr; tmos_start_callback_task &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_callback_task
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_callback_task
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveSetFirstTimer
</UL>

<P><STRONG><a name="[32d]"></a>ll_connect_set_procedure_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ll_connect.o(i.ll_connect_set_procedure_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ll_connect_set_procedure_timeout &rArr; tmos_start_callback_task &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_callback_task
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_callback_task
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_after_tx
</UL>

<P><STRONG><a name="[7b]"></a>ll_connect_supervision_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ll_connect.o(i.ll_connect_supervision_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ll_connect_supervision_timeout &rArr; LL_ConnectToStandby &rArr; LL_ReportGenerateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectToStandby
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_connect.o(i.ll_connect_set_connect_timeout)
</UL>
<P><STRONG><a name="[26f]"></a>ll_connect_update_get_offset</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, ll_connect.o(i.ll_connect_update_get_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand8
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoteConnParamReqReply
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_check_connect_point
</UL>

<P><STRONG><a name="[26e]"></a>ll_get_prime_number</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, ll.o(i.ll_get_prime_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ll_get_prime_number
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoteConnParamReqReply
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate
</UL>

<P><STRONG><a name="[32e]"></a>ll_hw_api_rx_set_txlen</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ip.o(i.ll_hw_api_rx_set_txlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_hw_api_rx_set_txlen &rArr; ble_ll_hw_api_shut
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_shut
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[32f]"></a>ll_hw_api_set_pkt_dec</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ip.o(i.ll_hw_api_set_pkt_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ll_hw_api_set_pkt_dec &rArr; AES_DevPktDec &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_DevPktDec
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[330]"></a>ll_hw_api_set_pkt_enc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ip.o(i.ll_hw_api_set_pkt_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ll_hw_api_set_pkt_enc &rArr; AES_DevPktEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_DevPktEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[320]"></a>ll_hw_temp_sample</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tmos_hw.o(i.ll_hw_temp_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ll_hw_temp_sample &rArr; BLE_RegInit &rArr; RFEND_TXCtune &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ADCTune
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RegInit
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_timer_slave_recv_timeout
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseStart
</UL>

<P><STRONG><a name="[329]"></a>ll_hw_timer_window_widening</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ll_connect.o(i.ll_hw_timer_window_widening))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_calculate_effective_len
</UL>

<P><STRONG><a name="[31f]"></a>ll_resolvinglist_renew_rpa</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ll_resolvinglist.o(i.ll_resolvinglist_renew_rpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ll_resolvinglist_renew_rpa &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddrGenerateResolvableAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseSet
</UL>

<P><STRONG><a name="[28c]"></a>ll_resolvinglist_renew_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_resolvinglist.o(i.ll_resolvinglist_renew_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ll_resolvinglist_renew_set &rArr; tmos_start_callback_task &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_callback_task
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistAdd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_resolvinglist_timeout_renew_rpa
</UL>

<P><STRONG><a name="[7d]"></a>ll_resolvinglist_timeout_renew_rpa</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ll_resolvinglist.o(i.ll_resolvinglist_timeout_renew_rpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ll_resolvinglist_timeout_renew_rpa &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddrGenerateResolvableAddress
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_resolvinglist_renew_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_resolvinglist.o(i.ll_resolvinglist_renew_set)
</UL>
<P><STRONG><a name="[332]"></a>ll_slave_check_connect_point</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, ll_connect.o(i.ll_slave_check_connect_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ll_slave_check_connect_point &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_update_get_offset
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReportGenerateEvent
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_after_tx
</UL>

<P><STRONG><a name="[7e]"></a>ll_slave_process</STRONG> (Thumb, 3264 bytes, Stack size 48 bytes, ll_slave.o(i.ll_slave_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ll_slave_process &rArr; ll_slave_process_after_tx &rArr; ll_slave_check_connect_point &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_api_set_pkt_enc
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_api_set_pkt_dec
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_api_rx_set_txlen
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_shut
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_rx
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_chkcrc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_timeout_process
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_rand
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_VersionInd
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UnknowRsp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TerminateInd
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncRsp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncReq
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlaveFeatureReq
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDmaBuf
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendAck
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxVersionExchange
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxLenUpdate
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxConnParamReq
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RejectIndExt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RejectInd
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PingRsp
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PingReq
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PauseEncRsp
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LengthRsp
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LengthReq
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FeatureRsp
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncRsp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectionParamRsp
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectionParamReq
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RxDataCompleteCback
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_after_tx
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_timer_slave_recv_timeout
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_send_data
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_recv_data
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_parse_datapdu_head
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_event_continue
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectTxPktnumIncrease
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectToStandby
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectRxPktnumIncrease
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectFreeTmosPrioritID
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectFlowcontrolTx
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectFlowcontrolRx
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_slave.o(i.ll_slave_process_event)
</UL>
<P><STRONG><a name="[36c]"></a>padding</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sm.o(i.padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
</UL>

<P><STRONG><a name="[2c8]"></a>sendAuthEvent</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, gap.o(i.sendAuthEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendAuthEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
</UL>

<P><STRONG><a name="[2d1]"></a>sendTerminateEvent</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, gap.o(i.sendTerminateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendTerminateEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessEnhancedConnectionCompleteEvt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
</UL>

<P><STRONG><a name="[34c]"></a>setupInitiatorKeys</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sm.o(i.setupInitiatorKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = setupInitiatorKeys &rArr; smInitiatorSendNextKeyInfo &rArr; smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[353]"></a>smDetermineKeySize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sm.o(i.smDetermineKeySize))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[34d]"></a>smEndPairing</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, sm.o(i.smEndPairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_NeedSendKey
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smTimedOut
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessEncryptChange
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smNextPairingState
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupInitiatorKeys
</UL>

<P><STRONG><a name="[2ac]"></a>smFreePairingParams</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sm.o(i.smFreePairingParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smFreePairingParams &rArr; smStopRspTimer &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStopRspTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smLinkCheck
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>

<P><STRONG><a name="[2a7]"></a>smGenerateConfirm</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, sm.o(i.smGenerateConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = smGenerateConfirm &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
</UL>

<P><STRONG><a name="[2ab]"></a>smGeneratePairingReqRsp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sm.o(i.smGeneratePairingReqRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
</UL>

<P><STRONG><a name="[1d7]"></a>smGenerateRandBuf</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gap.o(i.smGenerateRandBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smGenerateRandBuf &rArr; tmos_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SecParamsInit
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[351]"></a>smGenerateRandMsg</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, sm.o(i.smGenerateRandMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = smGenerateRandMsg &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[14]"></a>smInitiatorSendNextKeyInfo</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, sm.o(i.smInitiatorSendNextKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = smInitiatorSendNextKeyInfo &rArr; smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_rand
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSRK
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetIRK
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddressMode
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddress
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendSingingInfo
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendMasterID
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityInfo
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityAddrInfo
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendEncInfo
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupInitiatorKeys
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm.o(i.SM_ParamInit)
<LI> sm.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>smLinkCheck</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sm.o(i.smLinkCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = smLinkCheck &rArr; smFreePairingParams &rArr; smStopRspTimer &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.SM_Init)
</UL>
<P><STRONG><a name="[2a9]"></a>smNextPairingState</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sm.o(i.smNextPairingState))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smNextPairingState &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_GetPairingParam
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent
</UL>

<P><STRONG><a name="[354]"></a>smPairingSendEncInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sm.o(i.smPairingSendEncInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = smPairingSendEncInfo &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[359]"></a>smPairingSendIdentityAddrInfo</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sm.o(i.smPairingSendIdentityAddrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = smPairingSendIdentityAddrInfo &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[356]"></a>smPairingSendIdentityInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sm.o(i.smPairingSendIdentityInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = smPairingSendIdentityInfo &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[355]"></a>smPairingSendMasterID</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sm.o(i.smPairingSendMasterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[352]"></a>smPairingSendSingingInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sm.o(i.smPairingSendSingingInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = smPairingSendSingingInfo &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[35b]"></a>smProcessDataMsg</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, sm.o(i.smProcessDataMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = smProcessDataMsg &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseSigningInfo
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseSecurityReq
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingReq
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingRandom
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingFailed
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingConfirm
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseMasterID
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseIdentityInfo
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseIdentityAddrInfo
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseEncInfo
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessTMOSMsg
</UL>

<P><STRONG><a name="[367]"></a>smProcessEncryptChange</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, sm.o(i.smProcessEncryptChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = smProcessEncryptChange &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessTMOSMsg
</UL>

<P><STRONG><a name="[1cc]"></a>smProcessPairingReq</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, sm.o(i.smProcessPairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = smProcessPairingReq &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
</UL>

<P><STRONG><a name="[368]"></a>smProcessRandComplete</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sm.o(i.smProcessRandComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smProcessRandComplete &rArr; HCI_LE_RandCmd &rArr; API_LE_RandCmd &rArr; LL_Rand &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_RandCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessTMOSMsg
</UL>

<P><STRONG><a name="[2a8]"></a>smProcessTMOSMsg</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, sm.o(i.smProcessTMOSMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = smProcessTMOSMsg &rArr; smProcessDataMsg &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Role
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessEncryptChange
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent
</UL>

<P><STRONG><a name="[18]"></a>smResponderProcessLTKReq</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, sm.o(i.smResponderProcessLTKReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = smResponderProcessLTKReq &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_MB_DisconnectCmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LtkReqReplyCmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LtkReqNegReplyCmd
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm.o(i.SM_ParamInit)
<LI> sm.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>smResponderSendNextKeyInfo</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, sm.o(i.smResponderSendNextKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = smResponderSendNextKeyInfo &rArr; smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_rand
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSRK
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetIRK
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddressMode
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddress
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendSingingInfo
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendMasterID
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityInfo
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityAddrInfo
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendEncInfo
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm.o(i.SM_ParamInit)
<LI> sm.o(.data)
</UL>
<P><STRONG><a name="[36a]"></a>smSavePairInfo</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, sm.o(i.smSavePairInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smSavePairInfo &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
</UL>

<P><STRONG><a name="[1f3]"></a>smSendFailAndEnd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sm.o(i.smSendFailAndEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessPairingReq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateAuth
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[1f1]"></a>smSendSMMsg</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sm.o(i.smSendSMMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendSingingInfo
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendMasterID
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityInfo
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityAddrInfo
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendEncInfo
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandMsg
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm
</UL>

<P><STRONG><a name="[350]"></a>smSetPairingReqRsp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sm.o(i.smSetPairingReqRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smSetPairingReqRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
</UL>

<P><STRONG><a name="[1d1]"></a>smStartEncryption</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sm.o(i.smStartEncryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smStartEncryption
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
</UL>

<P><STRONG><a name="[366]"></a>smStartRspTimer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sm.o(i.smStartRspTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = smStartRspTimer &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[34f]"></a>smStopRspTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sm.o(i.smStopRspTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smStopRspTimer &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
</UL>

<P><STRONG><a name="[2aa]"></a>smTimedOut</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sm.o(i.smTimedOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smTimedOut &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_GetHandleFromSMEvtID
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent
</UL>

<P><STRONG><a name="[1f0]"></a>smUint8ToAuthReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sm.o(i.smUint8ToAuthReq))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
</UL>

<P><STRONG><a name="[2a3]"></a>sm_CMAC</STRONG> (Thumb, 294 bytes, Stack size 72 bytes, sm.o(i.sm_CMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_128
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padding
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[29f]"></a>sm_ah</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sm.o(i.sm_ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sm_ah &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_revmemcpy
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
</UL>

<P><STRONG><a name="[2a6]"></a>sm_c1</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, sm.o(i.sm_c1))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sm_c1 &rArr; sm_c1new &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddressMode
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddress
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingRsp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReq
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[36d]"></a>sm_c1new</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, sm.o(i.sm_c1new))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sm_c1new &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_revmemcpy
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
</UL>

<P><STRONG><a name="[369]"></a>sm_s1</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, sm.o(i.sm_s1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sm_s1 &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_revmemcpy
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
</UL>

<P><STRONG><a name="[36e]"></a>sm_xor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sm.o(i.sm_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
</UL>

<P><STRONG><a name="[83]"></a>smpBuildEncInfo</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sm.o(i.smpBuildEncInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildEncInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.smPairingSendEncInfo)
</UL>
<P><STRONG><a name="[84]"></a>smpBuildIdentityAddrInfo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sm.o(i.smpBuildIdentityAddrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildIdentityAddrInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.smPairingSendIdentityAddrInfo)
</UL>
<P><STRONG><a name="[85]"></a>smpBuildIdentityInfo</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sm.o(i.smpBuildIdentityInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildIdentityInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.smPairingSendIdentityInfo)
</UL>
<P><STRONG><a name="[86]"></a>smpBuildMasterID</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sm.o(i.smpBuildMasterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildMasterID
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.smPairingSendMasterID)
</UL>
<P><STRONG><a name="[7f]"></a>smpBuildPairingConfirm</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sm.o(i.smpBuildPairingConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildPairingConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.smGenerateConfirm)
</UL>
<P><STRONG><a name="[88]"></a>smpBuildPairingFailed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sm.o(i.smpBuildPairingFailed))
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.smSendFailAndEnd)
</UL>
<P><STRONG><a name="[82]"></a>smpBuildPairingRandom</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sm.o(i.smpBuildPairingRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildPairingRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.smGenerateRandMsg)
</UL>
<P><STRONG><a name="[80]"></a>smpBuildPairingReq</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, sm.o(i.smpBuildPairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpBuildPairingReq &rArr; smpBuildPairingReqRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.smGeneratePairingReqRsp)
</UL>
<P><STRONG><a name="[36f]"></a>smpBuildPairingReqRsp</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, sm.o(i.smpBuildPairingReqRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = smpBuildPairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingRsp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReq
</UL>

<P><STRONG><a name="[81]"></a>smpBuildPairingRsp</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, sm.o(i.smpBuildPairingRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpBuildPairingRsp &rArr; smpBuildPairingReqRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.smGeneratePairingReqRsp)
</UL>
<P><STRONG><a name="[5f]"></a>smpBuildSecurityReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sm.o(i.smpBuildSecurityReq))
<BR>[Address Reference Count : 1]<UL><LI> gap.o(i.GAP_SendSlaveSecurityRequest)
</UL>
<P><STRONG><a name="[87]"></a>smpBuildSigningInfo</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sm.o(i.smpBuildSigningInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildSigningInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.smPairingSendSingingInfo)
</UL>
<P><STRONG><a name="[13]"></a>smpInitiatorProcessIncoming</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, sm.o(i.smpInitiatorProcessIncoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = smpInitiatorProcessIncoming &rArr; smpInitiatorProcessPairingRsp &rArr; sm_c1 &rArr; sm_c1new &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendSlaveSecurityReqEvent
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandMsg
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupInitiatorKeys
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartEncryption
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm.o(i.SM_ParamInit)
<LI> sm.o(.data)
</UL>
<P><STRONG><a name="[370]"></a>smpInitiatorProcessPairingRsp</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, sm.o(i.smpInitiatorProcessPairingRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = smpInitiatorProcessPairingRsp &rArr; sm_c1 &rArr; sm_c1new &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSavePairInfo
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[360]"></a>smpParseEncInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sm.o(i.smpParseEncInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseEncInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[363]"></a>smpParseIdentityAddrInfo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sm.o(i.smpParseIdentityAddrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseIdentityAddrInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[362]"></a>smpParseIdentityInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sm.o(i.smpParseIdentityInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseIdentityInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[361]"></a>smpParseMasterID</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sm.o(i.smpParseMasterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseMasterID
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[35d]"></a>smpParsePairingConfirm</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sm.o(i.smpParsePairingConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParsePairingConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[35f]"></a>smpParsePairingFailed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sm.o(i.smpParsePairingFailed))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[35e]"></a>smpParsePairingRandom</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sm.o(i.smpParsePairingRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParsePairingRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[35c]"></a>smpParsePairingReq</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, sm.o(i.smpParsePairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpParsePairingReq
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[365]"></a>smpParseSecurityReq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sm.o(i.smpParseSecurityReq))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[364]"></a>smpParseSigningInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sm.o(i.smpParseSigningInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseSigningInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[16]"></a>smpResponderProcessIncoming</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, sm.o(i.smpResponderProcessIncoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = smpResponderProcessIncoming &rArr; sm_c1 &rArr; sm_c1new &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandMsg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm.o(i.SM_ParamInit)
<LI> sm.o(.data)
</UL>
<P><STRONG><a name="[371]"></a>smpResponderProcessPairingReq</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, sm.o(i.smpResponderProcessPairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = smpResponderProcessPairingReq &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSavePairInfo
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[16b]"></a>tmos_bm_adjust_header</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, memory.o(i.tmos_bm_adjust_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tmos_bm_adjust_header
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueNoti
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueInd
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadRsp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadMultiRsp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeRsp
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeRsp
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobRsp
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteRsp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoRsp
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueRsp
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capReassembleSegment
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket
</UL>

<P><STRONG><a name="[2bd]"></a>tmos_clear_event</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tmos.o(i.tmos_clear_event))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
</UL>

<P><STRONG><a name="[2dd]"></a>tmos_get_task_timer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tmos.o(i.tmos_get_task_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmos_get_task_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmosFindTask
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_update_callback_timer
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessGAPMsg
</UL>

<P><STRONG><a name="[181]"></a>tmos_isbufset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tmos.o(i.tmos_isbufset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmos_isbufset
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LibInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncWhiteList
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncResolveList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrChangeState
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondTotal
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SecParamsInit
</UL>

<P><STRONG><a name="[120]"></a>tmos_memcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tmos.o(i.tmos_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmos_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57X_BLEInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessGAPMsg
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindAddr
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WhitelistAdd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistAdd
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WhitelistLookup
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistPeerIdentifyAddressGetIrk
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistCheckPeerResolution
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
</UL>

<P><STRONG><a name="[f2]"></a>tmos_memcpy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tmos.o(i.tmos_memcpy))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanParamWriteAttrCB
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_GetParameter
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_ReadAttrCB
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevEnqueueReport
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevSendReport
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_sendNoti
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_GetParameter
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_SetParameter
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devInfo_ReadAttrCB
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battReadAttrCB
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessTMOSMsg
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memdup
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LibInit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessGAPMsg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_write
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseReadByTypeReq
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseFindByTypeValueReq
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_IsWriteLong
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_WriteAttrCB
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendSlaveSecurityReqEvent
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendEstLinkEvent
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_ConnectionCompleteEvent
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_CommandCompleteEvent
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WhitelistAdd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistAdd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanRspData
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetRandomAddress
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvParam
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvData
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataPkt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddWhiteListDevice
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddDeviceToResolvingList
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlaveFeatureReq
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxConnParamReq
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FeatureRsp
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncRsp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectionParamRsp
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectionParamReq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_action_in_connintervaltimeout
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_process
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseSet
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_advertise_tx
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralProcessEvent
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralEnable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseSigningInfo
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingRandom
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingConfirm
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseMasterID
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseIdentityInfo
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseIdentityAddrInfo
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseEncInfo
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildSigningInfo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingRandom
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingConfirm
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildMasterID
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildIdentityInfo
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildIdentityAddrInfo
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildEncInfo
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSavePairInfo
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendMasterID
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityAddrInfo
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandMsg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartEncryption
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningDirectEvt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ConvertUUIDto128
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_RecvDataPackets
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_ReadRemoteUsedFeaturesCompleteEvent
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_LongTermKeyRequestEvent
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_EnhancedConnectionCompleteEvent
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendSegment
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capReassembleSegment
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[1d0]"></a>tmos_memdup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tmos.o(i.tmos_memdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tmos_memdup &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
</UL>

<P><STRONG><a name="[1a1]"></a>tmos_memory_allocate</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, memory.o(i.tmos_memory_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memdup
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_write
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ParamInit
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_IsWriteLong
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WhitelistAdd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistAdd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataPkt
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreOpen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveCreateCore
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseCreateCore
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSavePairInfo
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartEncryption
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capAllocConnChannel
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_RecvDataPackets
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capReassembleSegment
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreDataListInit
</UL>

<P><STRONG><a name="[1cf]"></a>tmos_memory_free</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, memory.o(i.tmos_memory_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tmos_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_free
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_SystemProcess
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_notify
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_clear
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_IsWriteLong
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ClearPrepareWriteQ
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WhitelistClearAll
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistClearall
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataPkt
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreOpen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectShut
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanToStandby
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreClose
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessTMOSMsg
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartEncryption
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreePendingPkt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeScanRecs
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_RecvDataPackets
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendSegment
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendFCPkt
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeTxSDU
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capReassembleSegment
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreDataListFree
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
</UL>

<P><STRONG><a name="[2ae]"></a>tmos_memory_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, memory.o(i.tmos_memory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tmos_memory_init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_Init
</UL>

<P><STRONG><a name="[dd]"></a>tmos_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tmos.o(i.tmos_memset))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_SetParameter
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevDisconnected
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_ProcessEvent
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_SendValue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57X_BLEInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LibInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ParamInit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Erase
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_IsWriteLong
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ClearPrepareWriteQ
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_WriteAttrCB
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ParamInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendEstLinkEvent
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_ConnectionCompleteEvent
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TransmitterTest
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreOpen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveCreateCore
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseCreateCore
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralEnable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartEncryption
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyChannelEstEvt
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendConnectRsp
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capGetCoChannelInfo
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capAllocConnChannel
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeScanRecs
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_EnhancedConnectionCompleteEvent
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyCreditEvt
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeTxSDU
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessTMOSReportMsg
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreInit
</UL>

<P><STRONG><a name="[205]"></a>tmos_msg_allocate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, message.o(i.tmos_msg_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tmos_msg_allocate &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendSlaveSecurityReqEvent
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendEstLinkEvent
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_ConnectionCompleteEvent
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_EncryptionKeyRefreshCompleteEvent
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_EncryptionChangeEvent
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_DisconnectionCompleteEvent
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_DataBufferOverflowEvent
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_CommandStatusEvent
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_CommandCompleteEvent
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReportGenerateEvent
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningDirectEvt
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_RecvDataPackets
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_ReadRemoteVersionInfoEvent
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_NumberOfCompletedPacketsEvent
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_RemoteConnectionParameterRequestEvent
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_ReadRemoteUsedFeaturesCompleteEvent
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_LongTermKeyRequestEvent
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_EnhancedConnectionCompleteEvent
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_DataLengthChangeEvent
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_ConnectionUpdateCompleteEvent
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData
</UL>

<P><STRONG><a name="[a0]"></a>tmos_msg_deallocate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, message.o(i.tmos_msg_deallocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_ProcessEvent
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_ProcessEvent
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_ProcessEvent
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManage_ProcessEvent
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbHid_ProcessEvent
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_ProcessEvent
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_CbTimerProcessEvent
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ProcessEvent
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondFreeAuthEvt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessEvent
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralProcessEvent
</UL>

<P><STRONG><a name="[373]"></a>tmos_msg_enqueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, message.o(i.tmos_msg_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
</UL>

<P><STRONG><a name="[2af]"></a>tmos_msg_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, message.o(i.tmos_msg_init))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_Init
</UL>

<P><STRONG><a name="[9f]"></a>tmos_msg_receive</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, message.o(i.tmos_msg_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tmos_msg_receive &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_ProcessEvent
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_ProcessEvent
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_ProcessEvent
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManage_ProcessEvent
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbHid_ProcessEvent
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_ProcessEvent
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_CbTimerProcessEvent
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ProcessEvent
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessEvent
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralProcessEvent
</UL>

<P><STRONG><a name="[1c3]"></a>tmos_msg_send</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, message.o(i.tmos_msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendSlaveSecurityReqEvent
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendEstLinkEvent
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_ConnectionCompleteEvent
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_EncryptionKeyRefreshCompleteEvent
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_EncryptionChangeEvent
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_DisconnectionCompleteEvent
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_DataBufferOverflowEvent
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_CommandStatusEvent
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_CommandCompleteEvent
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReportGenerateEvent
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralProcessEvent
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningDirectEvt
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_RecvDataPackets
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_ReadRemoteVersionInfoEvent
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_NumberOfCompletedPacketsEvent
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_RemoteConnectionParameterRequestEvent
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_ReadRemoteUsedFeaturesCompleteEvent
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_LongTermKeyRequestEvent
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_EnhancedConnectionCompleteEvent
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_DataLengthChangeEvent
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_LE_ConnectionUpdateCompleteEvent
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData
</UL>

<P><STRONG><a name="[299]"></a>tmos_rand</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tmos.o(i.tmos_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmos_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand8
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand32
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_common_rand16
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[28b]"></a>tmos_revmemcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tmos.o(i.tmos_revmemcpy))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistAdd
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[ac]"></a>tmos_set_event</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tmos.o(i.tmos_set_event))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevEnqueueReport
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevPairStateCB
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_ProcessEvent
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_SendValue
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbHid_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_SystemProcess
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessGAPMsg
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIncSignCounter
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseStart
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvTraverseallChannel
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessReq
</UL>

<P><STRONG><a name="[18b]"></a>tmos_snv_clear</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tmos_snv.o(i.tmos_snv_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tmos_snv_clear &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasePage
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_notify
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Erase
</UL>

<P><STRONG><a name="[1a0]"></a>tmos_snv_compact</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmos_snv.o(i.tmos_snv_compact))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkTerm
</UL>

<P><STRONG><a name="[2b0]"></a>tmos_snv_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tmos_snv.o(i.tmos_snv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tmos_snv_init &rArr; tmos_snv_clear &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WtireFlash
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_Init
</UL>

<P><STRONG><a name="[1a9]"></a>tmos_snv_notify</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tmos_snv.o(i.tmos_snv_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tmos_snv_notify &rArr; tmos_snv_clear &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WtireFlash
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessGAPMsg
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_ProcessTMOSMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrChangeState
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralProcessEvent
</UL>

<P><STRONG><a name="[195]"></a>tmos_snv_read</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, tmos_snv.o(i.tmos_snv_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tmos_snv_read &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncResolveList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetStateFlags
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrChangeState
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralEnable
</UL>

<P><STRONG><a name="[1ae]"></a>tmos_snv_write</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tmos_snv.o(i.tmos_snv_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tmos_snv_write &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessGAPMsg
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrChangeState
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralProcessEvent
</UL>

<P><STRONG><a name="[2ef]"></a>tmos_start_callback_task</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, tmos.o(i.tmos_start_callback_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tmos_start_callback_task &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStartTimer
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_set_procedure_timeout
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_set_connect_timeout
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_set_auth_timeout
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStartTimer
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_resolvinglist_renew_set
</UL>

<P><STRONG><a name="[1da]"></a>tmos_start_reload_task</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tmos.o(i.tmos_start_reload_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tmos_start_reload_task &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmosFindTask
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete
</UL>

<P><STRONG><a name="[a3]"></a>tmos_start_task</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tmos.o(i.tmos_start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmosFindTask
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_ProcessEvent
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevBattCB
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_ProcessEvent
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_ProcessEvent
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManage_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManage_ProcessEvent
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbHid_ProcessEvent
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidEmu_ProcessEvent
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidEmuRptCB
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidEmuStateCB
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_update_callback_timer
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_reload_task
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_callback_task
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ProcessEvent
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseStart
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
</UL>

<P><STRONG><a name="[273]"></a>tmos_stop_callback_task</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tmos.o(i.tmos_stop_callback_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tmos_stop_callback_task &rArr; tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStopTimer
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistClearall
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_after_tx
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_set_procedure_timeout
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_set_connect_timeout
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_set_auth_timeout
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectShut
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStopTimer
</UL>

<P><STRONG><a name="[de]"></a>tmos_stop_task</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tmos.o(i.tmos_stop_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tmos_stop_task
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_clear_event
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmosFindTask
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevDisconnected
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevBattCB
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoard_SendValue
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_receive
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_callback_task
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitiateToStandby
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanToStandby
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvertiseToStandby
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStopRspTimer
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
</UL>

<P><STRONG><a name="[202]"></a>tmos_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tmos.o(i.tmos_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_WriteAttrCB
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB
</UL>

<P><STRONG><a name="[297]"></a>tmos_update_callback_timer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tmos.o(i.tmos_update_callback_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tmos_update_callback_timer &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_get_task_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetResolvableAddressTimeout
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_after_tx
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_action_in_connintervaltimeout
</UL>

<P><STRONG><a name="[2f2]"></a>xor_128</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, sm.o(i.xor_128))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xor_128
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[1a]"></a>NMI_Handler</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ch57x_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>LowPower_Halt_1</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ch57x_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LowPower_Halt_1 &rArr; PowerMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerSerive (via Veneer)
</UL>

<P><STRONG><a name="[d0]"></a>LowPower_Halt_2</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, ch57x_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LowPower_Halt_2
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerSerive (via Veneer)
</UL>

<P><STRONG><a name="[3c2]"></a>LowPower_Sleep</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, ch57x_int.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>LowPower_Shutdown</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, ch57x_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LowPower_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerSerive (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2]"></a>hidEmuStateCB</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hidkbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hidEmuStateCB &rArr; GAP_ConfigDeviceAddr &rArr; SM_CalcRandomAddr &rArr; sm_ah &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hidkbd.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>hidEmuRptCB</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, hidkbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hidEmuRptCB &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_SetParameter
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hid_GetParameter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hidkbd.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>hidEmuEvtCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hidkbd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hidkbd.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>battNotifyCB</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, battservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = battNotifyCB &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_free
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battservice.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>battMeasure</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, battservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = battMeasure &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_MeasLevel
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battReadAttrCB
</UL>

<P><STRONG><a name="[3]"></a>battReadAttrCB</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, battservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = battReadAttrCB &rArr; battMeasure &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battMeasure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battservice.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>battWriteAttrCB</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, battservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = battWriteAttrCB &rArr; GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_WriteCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battservice.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>devInfo_ReadAttrCB</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, devinfoservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = devInfo_ReadAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devinfoservice.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>hidDevScanParamCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hiddev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hiddev.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>hidDevBattCB</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hidDevBattCB &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hiddev.o(.text)
</UL>
<P><STRONG><a name="[f9]"></a>HidDev_sendNoti</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = HidDev_sendNoti &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_free
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_SetParameter
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevSendReport
</UL>

<P><STRONG><a name="[fb]"></a>hidDevRptById</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hidDevRptById
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_SetParameter
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevSendReport
</UL>

<P><STRONG><a name="[fa]"></a>hidDevSendReport</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = hidDevSendReport &rArr; HidDev_sendNoti &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevRptById
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_sendNoti
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_ProcessEvent
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Report
</UL>

<P><STRONG><a name="[105]"></a>hidDevInitialAdvertising</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hidDevInitialAdvertising &rArr; GAPRole_SetParameter &rArr; GAP_EndDiscoverable &rArr; HCI_LE_SetAdvEnableCmd &rArr; API_LE_SetAdvEnableCmd &rArr; LL_SetAdvControl &rArr; ble_ll_common_rand16 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevGapStateCB
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Report
</UL>

<P><STRONG><a name="[10d]"></a>hidDevRptByHandle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hidDevRptByHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_WriteAttrCB
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_ReadAttrCB
</UL>

<P><STRONG><a name="[10e]"></a>hidDevDisconnected</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hidDevDisconnected &rArr; GAPRole_SetParameter &rArr; GAP_EndDiscoverable &rArr; HCI_LE_SetAdvEnableCmd &rArr; API_LE_SetAdvEnableCmd &rArr; LL_SetAdvControl &rArr; ble_ll_common_rand16 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanParam_HandleConnStatusCB
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevBondCount
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_HandleConnStatusCB
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevGapStateCB
</UL>

<P><STRONG><a name="[8]"></a>hidDevGapStateCB</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hidDevGapStateCB &rArr; hidDevDisconnected &rArr; GAPRole_SetParameter &rArr; GAP_EndDiscoverable &rArr; HCI_LE_SetAdvEnableCmd &rArr; API_LE_SetAdvEnableCmd &rArr; LL_SetAdvControl &rArr; ble_ll_common_rand16 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevDisconnected
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevInitialAdvertising
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hiddev.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>hidDevParamUpdateCB</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hidDevParamUpdateCB &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hiddev.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>hidDevPairStateCB</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = hidDevPairStateCB &rArr; ScanParam_RefreshNotify &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanParam_RefreshNotify
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hiddev.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>hidDevPasscodeCB</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = hidDevPasscodeCB &rArr; GAPBondMgr_PasscodeRsp &rArr; GAP_PasscodeUpdate &rArr; SM_PasskeyUpdate &rArr; sm_c1 &rArr; sm_c1new &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_PasscodeRsp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_GetParameter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hiddev.o(.data)
</UL>
<P><STRONG><a name="[107]"></a>hidDevBondCount</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hidDevBondCount &rArr; GAPBondMgr_GetParameter &rArr; gapBondMgrBondTotal &rArr; tmos_isbufset
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_GetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevEnqueueReport
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevDisconnected
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Report
</UL>

<P><STRONG><a name="[108]"></a>hidDevEnqueueReport</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, hiddev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hidDevEnqueueReport &rArr; hidDevBondCount &rArr; GAPBondMgr_GetParameter &rArr; gapBondMgrBondTotal &rArr; tmos_isbufset
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidDevBondCount
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDev_Report
</UL>

<P><STRONG><a name="[c]"></a>scanParamReadAttrCB</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanparamservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanparamservice.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>scanParamWriteAttrCB</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, scanparamservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = scanParamWriteAttrCB &rArr; GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_WriteCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanparamservice.o(.data)
</UL>
<P><STRONG><a name="[372]"></a>tmosFindTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tmos.o(i.tmosFindTask))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_reload_task
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_get_task_timer
</UL>

<P><STRONG><a name="[1f4]"></a>disconnectNext</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gap.o(i.disconnectNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disconnectNext &rArr; HCI_DisconnectCmd &rArr; API_DisconnectCmd &rArr; HCI_CommandStatusCback &rArr; HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_FindFirst
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DisconnectCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessEnhancedConnectionCompleteEvt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
</UL>

<P><STRONG><a name="[2ce]"></a>gapProcessConnectionCompleteEvt</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, gap.o(i.gapProcessConnectionCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapProcessConnectionCompleteEvt &rArr; disconnectNext &rArr; HCI_DisconnectCmd &rArr; API_DisconnectCmd &rArr; HCI_CommandStatusCback &rArr; HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendEstLinkEvent
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapDetermineAddrType
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessTMOSMsg
</UL>

<P><STRONG><a name="[2d4]"></a>gapProcessEnhancedConnectionCompleteEvt</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, gap.o(i.gapProcessEnhancedConnectionCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapProcessEnhancedConnectionCompleteEvt &rArr; disconnectNext &rArr; HCI_DisconnectCmd &rArr; API_DisconnectCmd &rArr; HCI_CommandStatusCback &rArr; HOST_CommandStatusEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendEstLinkEvent
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapDetermineAddrType
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessTMOSMsg
</UL>

<P><STRONG><a name="[2d7]"></a>gapProcessRemoteConnParamReqEvt</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, gap.o(i.gapProcessRemoteConnParamReqEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = gapProcessRemoteConnParamReqEvt &rArr; HCI_LE_RemoteConnParamReqReplyCmd &rArr; API_LE_RemoteConnParamReqReplyCmd &rArr; LL_RemoteConnParamReqReply &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_RemoteConnParamReqReplyCmd
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_RemoteConnParamReqNegReplyCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessTMOSMsg
</UL>

<P><STRONG><a name="[1ee]"></a>gapProcessTMOSMsg</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, gap.o(i.gapProcessTMOSMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gapProcessTMOSMsg &rArr; gapProcessRemoteConnParamReqEvt &rArr; HCI_LE_RemoteConnParamReqReplyCmd &rArr; API_LE_RemoteConnParamReqReplyCmd &rArr; LL_RemoteConnParamReqReply &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRemoteConnParamReqEvt
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessEnhancedConnectionCompleteEvt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SetBufSize
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadBufSizeCmd
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[1e7]"></a>gapFreeAdvertState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_peripheral.o(i.gapFreeAdvertState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapFreeAdvertState &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt
</UL>

<P><STRONG><a name="[5e]"></a>gapPeriProcessConnEvt</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gap_peripheral.o(i.gapPeriProcessConnEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = gapPeriProcessConnEvt &rArr; gapL2capConnParamUpdateReq &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapL2capConnParamUpdateReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peripheral.o(i.GAP_PeripheralParamInit)
</UL>
<P><STRONG><a name="[5b]"></a>gapPeriProcessHCICmdCompleteEvt</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gap_peripheral.o(i.gapPeriProcessHCICmdCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapPeriProcessHCICmdCompleteEvt &rArr; HCI_LE_SetAdvEnableCmd &rArr; API_LE_SetAdvEnableCmd &rArr; LL_SetAdvControl &rArr; ble_ll_common_rand16 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvEnableCmd
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peripheral.o(i.GAP_PeripheralParamInit)
</UL>
<P><STRONG><a name="[5c]"></a>gapProcessAdvertisingEvt</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gap_peripheral.o(i.gapProcessAdvertisingEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gapProcessAdvertisingEvt &rArr; GAP_EndDiscoverable &rArr; HCI_LE_SetAdvEnableCmd &rArr; API_LE_SetAdvEnableCmd &rArr; LL_SetAdvControl &rArr; ble_ll_common_rand16 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peripheral.o(i.GAP_PeripheralParamInit)
</UL>
<P><STRONG><a name="[5d]"></a>gapSetAdvParams</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, gap_peripheral.o(i.gapSetAdvParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gapSetAdvParams &rArr; HCI_LE_SetAdvParamCmd &rArr; API_LE_SetAdvParamCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_GetParameter
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvParamCmd
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAddAddrAdj
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peripheral.o(i.GAP_PeripheralParamInit)
</UL>
<P><STRONG><a name="[2cb]"></a>gapWriteAdvEnableStatus</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, gap_peripheral.o(i.gapWriteAdvEnableStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapWriteAdvEnableStatus &rArr; tmos_start_reload_task &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_allocate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_reload_task
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindADType
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[e]"></a>ggs_ReadAttrCB</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, gapgattserver.o(i.ggs_ReadAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ggs_ReadAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_strlen
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gapgattserver.o(i.GGS_ParamInit)
<LI> gapgattserver.o(.data)
</UL>
<P><STRONG><a name="[220]"></a>ggs_SetAttrWPermit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, gapgattserver.o(i.ggs_SetAttrWPermit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ggs_SetAttrWPermit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
</UL>

<P><STRONG><a name="[f]"></a>ggs_WriteAttrCB</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, gapgattserver.o(i.ggs_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ggs_WriteAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_strlen
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gapgattserver.o(i.GGS_ParamInit)
<LI> gapgattserver.o(.data)
</UL>
<P><STRONG><a name="[20d]"></a>gattGetServerStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gattservapp.o(i.gattGetServerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattGetServerStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[8a]"></a>gattProcessExchangeMTUReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gattservapp.o(i.gattProcessExchangeMTUReq))
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>gattProcessExecuteWriteReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gattservapp.o(i.gattProcessExecuteWriteReq))
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>gattProcessFindByTypeValueReq</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gattservapp.o(i.gattProcessFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gattProcessFindByTypeValueReq &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>gattProcessFindInfoReq</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, gattservapp.o(i.gattProcessFindInfoReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = gattProcessFindInfoReq &rArr; ATT_FindInfoRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoRsp
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_NotifyEvent
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>gattProcessPrepareWriteReq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gattservapp.o(i.gattProcessPrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gattProcessPrepareWriteReq &rArr; GATT_VerifyPrepareWritePermissions &rArr; linkDB_Authen &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyPrepareWritePermissions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>gattProcessReadByGrpTypeReq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gattservapp.o(i.gattProcessReadByGrpTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gattProcessReadByGrpTypeReq &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>gattProcessReadByTypeReq</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gattservapp.o(i.gattProcessReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gattProcessReadByTypeReq &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>gattProcessReadMultiReq</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gattservapp.o(i.gattProcessReadMultiReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gattProcessReadMultiReq &rArr; GATT_VerifyReadPermissions &rArr; linkDB_Authen &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>gattProcessReadReq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gattservapp.o(i.gattProcessReadReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gattProcessReadReq &rArr; GATT_VerifyReadPermissions &rArr; linkDB_Authen &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>gattProcessWriteReq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gattservapp.o(i.gattProcessWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gattProcessWriteReq &rArr; GATT_VerifyWritePermissions &rArr; linkDB_Authen &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyWritePermissions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>gattServApp_FindCharCfgItem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindCharCfgItem))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteCharCfg
</UL>

<P><STRONG><a name="[1fd]"></a>gattServApp_ProcessMsg</STRONG> (Thumb, 570 bytes, Stack size 56 bytes, gattservapp.o(i.gattServApp_ProcessMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = gattServApp_ProcessMsg &rArr; gattServApp_ProcessReadByGrpTypeReq &rArr; ATT_ReadByGrpTypeRsp &rArr; attSendRspMsg &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_free
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_alloc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_free
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetDataLength
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetMTU
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadRsp
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobRsp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTURsp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_UpdateMTU
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_NotifyEvent
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_AppCompletedMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent
</UL>

<P><STRONG><a name="[61]"></a>gattServerHandleTimerCB</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gattservapp.o(i.gattServerHandleTimerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattServerHandleTimerCB &rArr; gattNotifyEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(i.GATT_Indication)
</UL>
<P><STRONG><a name="[63]"></a>gattServerNotifyTxCB</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gattservapp.o(i.gattServerNotifyTxCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattServerNotifyTxCB
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(i.GATT_InitServer)
</UL>
<P><STRONG><a name="[20b]"></a>gattServiceLastHandle</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, gattservapp.o(i.gattServiceLastHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattServiceLastHandle &rArr; GATT_ServiceNumAttrs
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceNumAttrs
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
</UL>

<P><STRONG><a name="[31c]"></a>reportStatusChange</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, linkdb.o(i.reportStatusChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reportStatusChange
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
</UL>

<P><STRONG><a name="[1aa]"></a>gapBondFreeAuthEvt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gapbondmgr.o(i.gapBondFreeAuthEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapBondFreeAuthEvt &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_msg_deallocate
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
</UL>

<P><STRONG><a name="[1a7]"></a>gapBondMgrAddBond</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, gapbondmgr.o(i.gapBondMgrAddBond))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = gapBondMgrAddBond &rArr; gapBondMgr_SyncResolveList &rArr; HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_isbufset
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_write
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondSetupPrivFlag
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncWhiteList
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncResolveList
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent
</UL>

<P><STRONG><a name="[19a]"></a>gapBondMgrAuthenticate</STRONG> (Thumb, 386 bytes, Stack size 64 bytes, gapbondmgr.o(i.gapBondMgrAuthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = gapBondMgrAuthenticate &rArr; GAP_Authenticate &rArr; SM_StartPairing &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; HCI_SendDataPkt &rArr; API_SendDataPkt &rArr; LL_SendDataPkt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SlaveReqSecurity
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[194]"></a>gapBondMgrBondReq</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, gapbondmgr.o(i.gapBondMgrBondReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapBondMgrBondReq &rArr; GAP_Bond &rArr; tmos_memdup &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SlaveReqSecurity
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[18c]"></a>gapBondMgrBondTotal</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgrBondTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapBondMgrBondTotal &rArr; tmos_isbufset
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_isbufset
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_GetParameter
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondSetupPrivFlag
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
</UL>

<P><STRONG><a name="[1b4]"></a>gapBondMgrChangeState</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gapbondmgr.o(i.gapBondMgrChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapBondMgrChangeState &rArr; tmos_snv_write &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_isbufset
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_write
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ServiceChangeInd
</UL>

<P><STRONG><a name="[19e]"></a>gapBondMgrEraseAllBondings</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgrEraseAllBondings))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gapBondMgrEraseAllBondings &rArr; gapBondMgrEraseBonding &rArr; tmos_snv_write &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkTerm
</UL>

<P><STRONG><a name="[19f]"></a>gapBondMgrEraseBonding</STRONG> (Thumb, 226 bytes, Stack size 88 bytes, gapbondmgr.o(i.gapBondMgrEraseBonding))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gapBondMgrEraseBonding &rArr; tmos_snv_write &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_isbufset
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_clear_event
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_write
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_notify
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondFreeAuthEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkTerm
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseAllBondings
</UL>

<P><STRONG><a name="[1b0]"></a>gapBondMgrFindAddr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgrFindAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapBondMgrFindAddr &rArr; tmos_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
</UL>

<P><STRONG><a name="[2be]"></a>gapBondMgrFindCharCfgItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapbondmgr.o(i.gapBondMgrFindCharCfgItem))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg
</UL>

<P><STRONG><a name="[1b2]"></a>gapBondMgrGetPublicAddr</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, gapbondmgr.o(i.gapBondMgrGetPublicAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapBondMgrGetPublicAddr &rArr; tmos_snv_read &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>

<P><STRONG><a name="[193]"></a>gapBondMgrGetStateFlags</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gapbondmgr.o(i.gapBondMgrGetStateFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapBondMgrGetStateFlags &rArr; tmos_snv_read &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SlaveReqSecurity
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[197]"></a>gapBondMgrInvertCharCfgItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapbondmgr.o(i.gapBondMgrInvertCharCfgItem))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg
</UL>

<P><STRONG><a name="[190]"></a>gapBondMgrReadBonds</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgrReadBonds))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gapBondMgrReadBonds &rArr; gapBondMgr_SyncResolveList &rArr; HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondSetupPrivFlag
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncWhiteList
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncResolveList
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkTerm
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Init
</UL>

<P><STRONG><a name="[4e]"></a>gapBondMgrSendServiceChange</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gapbondmgr.o(i.gapBondMgrSendServiceChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = gapBondMgrSendServiceChange &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ServiceChangeInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapbondmgr.o(i.GAPBondMgr_ServiceChangeInd)
</UL>
<P><STRONG><a name="[1b7]"></a>gapBondMgrUpdateCharCfg</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, gapbondmgr.o(i.gapBondMgrUpdateCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapBondMgrUpdateCharCfg &rArr; tmos_snv_write &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_isbufset
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_write
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrInvertCharCfgItem
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_UpdateCharCfg
</UL>

<P><STRONG><a name="[1a6]"></a>gapBondMgr_ProcessTMOSMsg</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgr_ProcessTMOSMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = gapBondMgr_ProcessTMOSMsg &rArr; GAPBondMgr_ServiceChangeInd &rArr; gapBondMgrSendServiceChange &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_bm_free
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_notify
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_UpdateCharCfg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ServiceChangeInd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent
</UL>

<P><STRONG><a name="[1a8]"></a>gapBondMgr_SyncCharCfg</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, gapbondmgr.o(i.gapBondMgr_SyncCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gapBondMgr_SyncCharCfg &rArr; GAPBondMgr_UpdateCharCfg &rArr; GAPBondMgr_ResolveAddr &rArr; GAP_ResolvePrivateAddr &rArr; SM_ResolveRandomAddrs &rArr; sm_ah &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_UpdateCharCfg
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent
</UL>

<P><STRONG><a name="[2bb]"></a>gapBondMgr_SyncResolveList</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, gapbondmgr.o(i.gapBondMgr_SyncResolveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gapBondMgr_SyncResolveList &rArr; HCI_LE_AddDeviceToResolvingList &rArr; API_LE_AddDeviceToResolvingList &rArr; LL_AddDeviceToResolvingList &rArr; LL_ResolvinglistAdd &rArr; LL_AddrGenerateResolvableAddress &rArr; ble_ll_common_rand32 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_isbufset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_read
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ClearResolvingList
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_AddDeviceToResolvingList
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
</UL>

<P><STRONG><a name="[2ba]"></a>gapBondMgr_SyncWhiteList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgr_SyncWhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapBondMgr_SyncWhiteList &rArr; HCI_LE_ClearWhiteListCmd &rArr; API_LE_ClearWhiteListCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_isbufset
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ClearWhiteListCmd
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_AddWhiteListCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
</UL>

<P><STRONG><a name="[12]"></a>gapBondPairStateCB</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondPairStateCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gapBondPairStateCB &rArr; linkDB_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gapbondmgr.o(.data)
<LI> gapbondmgr.o(i.GAPBondMgr_ParamInit)
</UL>
<P><STRONG><a name="[11]"></a>gapBondPasscodeCB</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, gapbondmgr.o(i.gapBondPasscodeCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = gapBondPasscodeCB &rArr; GAP_PasscodeUpdate &rArr; SM_PasskeyUpdate &rArr; sm_c1 &rArr; sm_c1new &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateAuth
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gapbondmgr.o(.data)
<LI> gapbondmgr.o(i.GAPBondMgr_ParamInit)
</UL>
<P><STRONG><a name="[2bc]"></a>gapBondSetupPrivFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gapbondmgr.o(i.gapBondSetupPrivFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapBondSetupPrivFlag &rArr; GGS_SetParameter &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
</UL>

<P><STRONG><a name="[2dc]"></a>gapRole_PeripheralProcessGAPMsg</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, peripheral.o(i.gapRole_PeripheralProcessGAPMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = gapRole_PeripheralProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_set_event
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_get_task_timer
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_snv_notify
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessTMOSMsg
</UL>

<P><STRONG><a name="[1c2]"></a>gapRole_PeripheralProcessTMOSMsg</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, peripheral.o(i.gapRole_PeripheralProcessTMOSMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = gapRole_PeripheralProcessTMOSMsg &rArr; gapRole_PeripheralProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_PeripheralProcessGAPMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_PeripheralProcessEvent
</UL>

<P><STRONG><a name="[6b]"></a>llAdvertiseCreateCore</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ll_advertise.o(i.llAdvertiseCreateCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = llAdvertiseCreateCore &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxPower
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_advertise.o(i.LL_AdvertiseEnalbe)
</UL>
<P><STRONG><a name="[31d]"></a>ll_advertise_tx</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, ll_advertise.o(i.ll_advertise_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ll_advertise_tx &rArr; ble_ll_hw_api_tx &rArr; BLE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memcpy
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_tx
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_shut
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvertiseStart
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdvTraverseallChannel
</UL>

<P><STRONG><a name="[6c]"></a>llSlaveCreateCore</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ll_slave.o(i.llSlaveCreateCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llSlaveCreateCore &rArr; LL_CoreOpen &rArr; LL_CoreDataListInit &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memset
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_memory_allocate
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_HopInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreOpen
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_init_dataLen
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_flowcontrol_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CoreGetCore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_slave.o(i.LL_SlaveEnalbe)
</UL>
<P><STRONG><a name="[6d]"></a>llSlaveSetFirstTimer</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, ll_slave.o(i.llSlaveSetFirstTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = llSlaveSetFirstTimer &rArr; ll_connect_set_connect_timeout &rArr; tmos_start_callback_task &rArr; tmos_start_task &rArr; tmos_memory_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessRegister
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_set_connect_timeout
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_init_pingOffset
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReportGenerateEvent
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_slave.o(i.LL_SlaveEnalbe)
</UL>
<P><STRONG><a name="[331]"></a>ll_hw_timer_slave_recv_timeout</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ll_slave.o(i.ll_hw_timer_slave_recv_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ll_hw_timer_slave_recv_timeout &rArr; ll_hw_temp_sample &rArr; BLE_RegInit &rArr; RFEND_TXCtune &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_temp_sample
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process_event
</UL>

<P><STRONG><a name="[334]"></a>ll_slave_process_after_tx</STRONG> (Thumb, 644 bytes, Stack size 24 bytes, ll_slave.o(i.ll_slave_process_after_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ll_slave_process_after_tx &rArr; ll_slave_check_connect_point &rArr; ll_connect_update_get_offset &rArr; ble_ll_common_rand8 &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_update_callback_timer
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_callback_task
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_check_connect_point
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_set_procedure_timeout
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_set_auth_timeout
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_init_pingOffset
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectToStandby
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReportGenerateEvent
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_process
</UL>

<P><STRONG><a name="[78]"></a>ll_slave_process_event</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, ll_slave.o(i.ll_slave_process_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ll_slave_process_event &rArr; ll_hw_timer_slave_recv_timeout &rArr; ll_hw_temp_sample &rArr; BLE_RegInit &rArr; RFEND_TXCtune &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_api_shut
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_set_connect_event
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMOS_ProcessRegister
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_HopGetChannel
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_timer_slave_recv_timeout
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_change_connect_point
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connect_action_in_connintervaltimeout
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnectToStandby
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_slave.o(i.llSlaveSetFirstTimer)
</UL>
<P><STRONG><a name="[2d9]"></a>gapSendScanEnable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gap_central.o(i.gapSendScanEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapSendScanEnable &rArr; HCI_LE_SetScanEnableCmd &rArr; API_LE_SetScanEnableCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetScanEnableCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningDirectEvt
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
</UL>

<P><STRONG><a name="[2c3]"></a>gapSetScanParamStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gap_central.o(i.gapSetScanParamStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapSetScanParamStatus &rArr; gapSendScanEnable &rArr; HCI_LE_SetScanEnableCmd &rArr; API_LE_SetScanEnableCmd &rArr; HCI_CommandCompleteCback &rArr; HOST_CommandCompleteEvent &rArr; tmos_msg_send &rArr; tmos_msg_deallocate &rArr; tmos_memory_free
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_stop_task
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmos_start_task
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentProcessHCICmdEvt
</UL>

<P><STRONG><a name="[73]"></a>l2capBuildConnectRsp</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, l2cap_sdu.o(i.l2capBuildConnectRsp))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_sdu.o(i.l2capSendConnectRsp)
</UL>
<P><STRONG><a name="[68]"></a>l2capBuildDisconnectReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, l2cap_sdu.o(i.l2capBuildDisconnectReq))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_sdu.o(i.L2CAP_DisconnectReq)
</UL>
<P><STRONG><a name="[66]"></a>l2capBuildParamUpdateReq</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, l2cap_sdu.o(i.l2capBuildParamUpdateReq))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_sdu.o(i.L2CAP_ConnParamUpdateReq)
</UL>
<P><STRONG><a name="[67]"></a>l2capBuildParamUpdateRsp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, l2cap_sdu.o(i.l2capBuildParamUpdateRsp))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_sdu.o(i.L2CAP_ConnParamUpdateRsp)
</UL>
<P><STRONG><a name="[28e]"></a>ll_resolvinglist_checkRPA</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ll_resolvinglist.o(i.ll_resolvinglist_checkRPA))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ll_resolvinglist_checkRPA &rArr; LL_Encrypt &rArr; AES_DevAESEnc &rArr; AES_DecError
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistPeerRpaAddressGetIrk
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ResolvinglistCheckPeerResolution
</UL>

<P><STRONG><a name="[2b4]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[2b6]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b5]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
